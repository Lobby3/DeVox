{
  "version": "3.4",
  "log": [
    {
      "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:GnosisSafe": {
        "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:19",
        "version": {
          "withMetadata": "b3fef2de9c854c87f5d3c9afd821b669e82543bdb9784f39a055767a2e37fcb0",
          "withoutMetadata": "7122f5c5071d8814d8e7bf64e4eb4e124c897971e4372227abd1812afd3dc11d",
          "linkedWithoutMetadata": "7122f5c5071d8814d8e7bf64e4eb4e124c897971e4372227abd1812afd3dc11d"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:GuardManager",
          "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol:StorageAccessible",
          "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol:FallbackManager",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidatorConstants",
          "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol:SecuredTokenTransfer",
          "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol:SignatureDecoder",
          "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:OwnerManager",
          "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:ModuleManager",
          "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:Executor",
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized",
          "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:Singleton",
          "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol:EtherPaymentFallback"
        ],
        "libraries": [
          "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol:GnosisSafeMath"
        ],
        "methods": [
          "()",
          "setup(address[],uint256,address,bytes,address,address,uint256,address payable)",
          "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes)",
          "checkSignatures(bytes32,bytes,bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "requiredTxGas(address,uint256,bytes,uint8)",
          "approveHash(bytes32)",
          "getChainId()",
          "domainSeparator()",
          "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)",
          "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafe",
            "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:59"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Singleton",
              "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:10"
            },
            {
              "label": "modules",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ModuleManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:18"
            },
            {
              "label": "owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:15"
            },
            {
              "label": "ownerCount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:16"
            },
            {
              "label": "threshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:17"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GnosisSafe",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:51"
            },
            {
              "label": "_deprecatedDomainSeparator",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "GnosisSafe",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:52"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "GnosisSafe",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:54"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "GnosisSafe",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:Executor": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:7",
        "version": {
          "withMetadata": "61a54a3b80c3dce4ea0cb7938bc8131cd93badb401a0f402f6813fd99962f2c6",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol:FallbackManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol:8",
        "version": {
          "withMetadata": "74eb227492d32bc04dca8586c53efa677aaa4dd520ea55b95c3f762e9e2943e1",
          "withoutMetadata": "cc004296d7d999632667e63dcc6e22c0f0e21f367b250b7d52eedecdfd6fd767",
          "linkedWithoutMetadata": "cc004296d7d999632667e63dcc6e22c0f0e21f367b250b7d52eedecdfd6fd767"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "setFallbackHandler(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:Guard": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes,address)",
          "checkAfterExecution(bytes32,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:GuardManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:27",
        "version": {
          "withMetadata": "37d1f0c289bb808c9a73633d48191a7f5b3b0ad32126c365502ca48f0fb131ca",
          "withoutMetadata": "c40fff295ce1ebab796f4c29403e8c53d777ee8b8a75c145866f299647141bb4",
          "linkedWithoutMetadata": "c40fff295ce1ebab796f4c29403e8c53d777ee8b8a75c145866f299647141bb4"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "setGuard(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:ModuleManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:10",
        "version": {
          "withMetadata": "785371ba3013f36dda02d6da51c802e2338f1d3a5ad587c73d96b21eb4e62331",
          "withoutMetadata": "e08bce33dc8c2878cbebdd0ddaea38c6aaf0511cb7860223141a418a83cdf658",
          "linkedWithoutMetadata": "e08bce33dc8c2878cbebdd0ddaea38c6aaf0511cb7860223141a418a83cdf658"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:Executor",
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "enableModule(address)",
          "disableModule(address,address)",
          "execTransactionFromModule(address,uint256,bytes,uint8)",
          "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)",
          "isModuleEnabled(address)",
          "getModulesPaginated(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "modules",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ModuleManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:OwnerManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:8",
        "version": {
          "withMetadata": "c4aeff6143e081234bd00865630073e87a163adef515f000cf8ec6f97f019ff9",
          "withoutMetadata": "5234b6f062926dcebf881b8cca5a6558b958396718e58e10b889d6078eed93c2",
          "linkedWithoutMetadata": "5234b6f062926dcebf881b8cca5a6558b958396718e58e10b889d6078eed93c2"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "addOwnerWithThreshold(address,uint256)",
          "removeOwner(address,address,uint256)",
          "swapOwner(address,address,address)",
          "changeThreshold(uint256)",
          "getThreshold()",
          "isOwner(address)",
          "getOwners()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:15"
            },
            {
              "label": "ownerCount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:16"
            },
            {
              "label": "threshold",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/Enum.sol:Enum": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/Enum.sol:6",
        "version": {
          "withMetadata": "29e475236e3987bc55d3ec1650af2fd8ae3e9539bf22989b66211b31c841b9cc",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol:EtherPaymentFallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol:6",
        "version": {
          "withMetadata": "a7a1b9951b3afd4ab8841d4e0afdd1c3bce5410ac1b32df93a86e264ef9b6737",
          "withoutMetadata": "2df5b0a6e815736a589f0331577b6d497e1b407aaa2113a81067671b40e55a4b",
          "linkedWithoutMetadata": "2df5b0a6e815736a589f0331577b6d497e1b407aaa2113a81067671b40e55a4b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol:SecuredTokenTransfer": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol:6",
        "version": {
          "withMetadata": "1fcf1eb6d5cb8e4ca4951cc37130610771cf6cb7aeb19cd21beba5763ec23015",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:6",
        "version": {
          "withMetadata": "f3dd46f4172c4ce11c64b882691f8704c7f6407710d402088f0b5f4dd7bf86cb",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol:SignatureDecoder": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol:6",
        "version": {
          "withMetadata": "25f96c9d516ce3400b2ae113b09bb514b1bd6191f0a78c7a67f60ed4a97565b4",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:Singleton": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:7",
        "version": {
          "withMetadata": "4a3bcd7a2643da3de05ea24bd2a89fed2e07034040b12a1ed4a01b6288b239b9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Singleton",
              "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol:StorageAccessible": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol:6",
        "version": {
          "withMetadata": "11ed2bdf00653b10b875bc143b228168953cb65a0e778163d18fc2129f7194fb",
          "withoutMetadata": "a54e4aea5f467ad25444928af36a5c5a393fde64d04eff518368c1ef14981489",
          "linkedWithoutMetadata": "a54e4aea5f467ad25444928af36a5c5a393fde64d04eff518368c1ef14981489"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageAt(uint256,uint256)",
          "simulateAndRevert(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:GnosisSafeStorage": {
        "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:6",
        "version": {
          "withMetadata": "6c56793d8b87142bf4c73f9ee6a3e591ccb439b3648106735f476c0efb963e08",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:8"
            },
            {
              "label": "modules",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:10"
            },
            {
              "label": "owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:12"
            },
            {
              "label": "ownerCount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:13"
            },
            {
              "label": "threshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:14"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "5",
              "type": "t_bytes32",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:17"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:18"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:19"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/examples/libraries/SignMessage.sol:SignMessageLib": {
        "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/SignMessage.sol:9",
        "version": {
          "withMetadata": "b182a64dc37bb9a2604f9213ce1a056b5ff382b7287f7aaadf8c7153bb23ed0d",
          "withoutMetadata": "850d996ad4594c455c1bc49353e769d93f8635db93eab527e26e2e269786e214",
          "linkedWithoutMetadata": "850d996ad4594c455c1bc49353e769d93f8635db93eab527e26e2e269786e214"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:GnosisSafeStorage"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "getMessageHash(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:8"
            },
            {
              "label": "modules",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:10"
            },
            {
              "label": "owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:12"
            },
            {
              "label": "ownerCount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:13"
            },
            {
              "label": "threshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:14"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "5",
              "type": "t_bytes32",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:17"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:18"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:19"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol:GnosisSafeMath": {
        "src": "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol:10",
        "version": {
          "withMetadata": "59aced67b57f535517918a9dd365a6471718c0fbe073a15bdbd50518cddb83e2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol:CompatibilityFallbackHandler": {
        "src": "@gnosis.pm/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol:10",
        "version": {
          "withMetadata": "f529e38235bbf3b8ae34b55f28b4ee87f97856df6de50738bc489ae5a2069c0e",
          "withoutMetadata": "b78733dbdbd750500e2878d8eaca1437c8adab378f4458ce841278d7a4531da7",
          "linkedWithoutMetadata": "b78733dbdbd750500e2878d8eaca1437c8adab378f4458ce841278d7a4531da7"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidator",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidatorConstants",
          "@gnosis.pm/safe-contracts/contracts/handler/DefaultCallbackHandler.sol:DefaultCallbackHandler",
          "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol:IERC165",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol:ERC721TokenReceiver",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol:ERC777TokensRecipient",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol:ERC1155TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)",
          "getMessageHash(bytes)",
          "getMessageHashForSafe(address,bytes)",
          "isValidSignature(bytes32,bytes)",
          "getModules()",
          "simulate(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/handler/DefaultCallbackHandler.sol:DefaultCallbackHandler": {
        "src": "@gnosis.pm/safe-contracts/contracts/handler/DefaultCallbackHandler.sol:11",
        "version": {
          "withMetadata": "d299c633e76f02c7f42392146a77df69df5da17ffd42e95a9301ab6efbf6a34e",
          "withoutMetadata": "8624de4c7d60e1621a702613663efd5ffe119f2d66c0bda107a705d6a4bb85d7",
          "linkedWithoutMetadata": "8624de4c7d60e1621a702613663efd5ffe119f2d66c0bda107a705d6a4bb85d7"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol:IERC165",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol:ERC721TokenReceiver",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol:ERC777TokensRecipient",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol:ERC1155TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "tokensReceived(address,address,address,uint256,bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol:ERC1155TokenReceiver": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol:ERC721TokenReceiver": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol:ERC777TokensRecipient": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensReceived(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol:IERC165": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidator": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:9",
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidatorConstants": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:4",
        "version": {
          "withMetadata": "5512cbabd83ed1efce048a0ba3f621766efa65b8e185f86bf61d1a3428077d50",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol:MultiSend": {
        "src": "@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol:9",
        "version": {
          "withMetadata": "f2acdd197a3320a428ebf53a1d71d89983b1922910cfc3acf86f73201f6bf5dc",
          "withoutMetadata": "955bfd4ec5b09aa36801eb71a4548dd2beab00635a0b0d9546e2af7ba238e197",
          "linkedWithoutMetadata": "955bfd4ec5b09aa36801eb71a4548dd2beab00635a0b0d9546e2af7ba238e197"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "multiSend(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiSend",
            "src": "@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "multisendSingleton",
            "src": "@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:GnosisSafeProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:13",
        "version": {
          "withMetadata": "6180ea3b5c8203a191991712740b6efdbd1a7d1236e11cae9b2ca7685eff2bde",
          "withoutMetadata": "1df740ef3a28d33093ea03939152ecd810da18058a3f8931a9dc2a9d9aae2254",
          "linkedWithoutMetadata": "1df740ef3a28d33093ea03939152ecd810da18058a3f8931a9dc2a9d9aae2254"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafeProxy",
            "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GnosisSafeProxy",
              "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:IProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "masterCopy()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol:GnosisSafeProxyFactory": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol:9",
        "version": {
          "withMetadata": "096dba2f50d43beb3586b5506ccd61100d7ab61a289f25eef4c37e6f1c50b0a7",
          "withoutMetadata": "a16e8498d6b9ddd969e73036f3a188595d9a1b1a9950f1c08d38d7efaa18509a",
          "linkedWithoutMetadata": "a16e8498d6b9ddd969e73036f3a188595d9a1b1a9950f1c08d38d7efaa18509a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createProxy(address,bytes)",
          "proxyRuntimeCode()",
          "proxyCreationCode()",
          "createProxyWithNonce(address,bytes,uint256)",
          "createProxyWithCallback(address,bytes,uint256,address)",
          "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol:IProxyCreationCallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxyCreated(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/core/Module.sol:Module": {
        "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:10",
        "inherit": [
          "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:Guardable",
          "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol:FactoryFriendly",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setAvatar(address)",
          "setTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "guard",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Guardable",
              "src": "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:10"
            },
            {
              "label": "avatar",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "Module",
              "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:12"
            },
            {
              "label": "target",
              "offset": 0,
              "slot": "103",
              "type": "t_address",
              "contract": "Module",
              "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol:FactoryFriendly": {
        "src": "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol:8",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setUp(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol:ModuleProxyFactory": {
        "src": "@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol:4",
        "version": {
          "withMetadata": "a93e8daf47010ef2863f1f1387da04526dc4c5254a0ffcee2509ae7ed7da8d47",
          "withoutMetadata": "e3cf0f298bc568f366a732b7ac7a0f413ecadaaa5b9d258603de3cbac21bfd6e",
          "linkedWithoutMetadata": "e3cf0f298bc568f366a732b7ac7a0f413ecadaaa5b9d258603de3cbac21bfd6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployModule(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol:BaseGuard": {
        "src": "@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol:8",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes,address)",
          "checkAfterExecution(bytes32,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:Guardable": {
        "src": "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:9",
        "version": {
          "withMetadata": "4a05cd74f3612620eca78078f29bf47fbe27bda6fbd4e4c9019bb048094b5246",
          "withoutMetadata": "402d869368dc8de43273bd013d07acde8dc6ac48dad0ee0f82b2cd9d577a9afe",
          "linkedWithoutMetadata": "402d869368dc8de43273bd013d07acde8dc6ac48dad0ee0f82b2cd9d577a9afe"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setGuard(address)",
          "getGuard()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "guard",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Guardable",
              "src": "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol:IAvatar": {
        "src": "@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enableModule(address)",
          "disableModule(address,address)",
          "execTransactionFromModule(address,uint256,bytes,uint8)",
          "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)",
          "isModuleEnabled(address)",
          "getModulesPaginated(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol:IGuard": {
        "src": "@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes,address)",
          "checkAfterExecution(bytes32,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@opengsn/contracts/src/BaseRelayRecipient.sol:BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)4010_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)4010_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)4010_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "34a6e9140ec434094902638e8c54f4b40cae685ca19cb01f96d59fd66f50c4a9",
          "withoutMetadata": "44c9d5e639f1b3f8236ee706abb7a8715f1bff7582fe7bcb3dcb2361bd490796",
          "linkedWithoutMetadata": "44c9d5e639f1b3f8236ee706abb7a8715f1bff7582fe7bcb3dcb2361bd490796"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:43",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol:ArraysUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:CountersUpgradeable"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(Snapshots)6145_storage)",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:62"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(Snapshots)6145_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:63"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Counter)7195_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:66"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:207"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)6145_storage)": {
              "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)6145_storage": {
              "label": "struct ERC20SnapshotUpgradeable.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:CountersUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "8957b6d3b61774ddc6525031dd34b7ce9b0bf723fcdbb3b34012a6f8c1d91ba8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol:ArraysUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol:12",
        "version": {
          "withMetadata": "db8381d02b84173e504d8d97f426643d5d3dffa7e2b3f8495dcabc7443ce870f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "8e7b9a53bb6ce7c7dcba325cb786a70bc7ba824268437a8fee146a9cca24bc5b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "e6db8c521c599a862f3a893308f96c2a3dfa4d1bad7ab65aee535c8162cc9234",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "d8dd66d7b2ad3e484ca4ce8ef0abd4dc6166e26e1003413cde16cbbb2dae2103",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "68537a45cc333ba0df04f562ea50faad5d5c213d841103a6cdc91f522b0f65f7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "d26a07ef9df85c9e436ada32a0234ac7e1539d82a69e2d25e371331d5e382b48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/Clones.sol:Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:19",
        "version": {
          "withMetadata": "db60fb203b69a812ecfe60a58a91814fde56bdce30a7238a5bef1f88d8491db1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "6b02d39f3491487b239e7bd3ec6b5924ac7bff35c9ed8dadf29dd23769694a7f",
          "withoutMetadata": "6b02d39f3491487b239e7bd3ec6b5924ac7bff35c9ed8dadf29dd23769694a7f",
          "linkedWithoutMetadata": "6b02d39f3491487b239e7bd3ec6b5924ac7bff35c9ed8dadf29dd23769694a7f"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "454d96df2a01cc7f3a1ced675ef265cfa99826203167f97ce336b2dd796f9fc5",
          "withoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d",
          "linkedWithoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "766d475d25335b7ecde63bce7d0b469468a53cd4219bd42ae4040c3e91c492c9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "09e72ecfd886e6667bdab503c637e7e6bf5b65e8d33676012ef8a630026efccc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/Baal.sol:Baal": {
        "src": "contracts/fixtures/Baal/Baal.sol:25",
        "version": {
          "withMetadata": "26585188f3810142a885cfe7f84142f9cedbbacce2fb526352cfbbe09030695c",
          "withoutMetadata": "026881ad92b7fd85ecf521a07bd5b244a857e0ebda6234ab00da963bf2f4e2b8",
          "linkedWithoutMetadata": "026881ad92b7fd85ecf521a07bd5b244a857e0ebda6234ab00da963bf2f4e2b8"
        },
        "inherit": [
          "@opengsn/contracts/src/BaseRelayRecipient.sol:BaseRelayRecipient",
          "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:IRelayRecipient",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@gnosis.pm/zodiac/contracts/core/Module.sol:Module",
          "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:Guardable",
          "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol:FactoryFriendly",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "encodeMultisend(bytes[],address)",
          "()",
          "setUp(bytes)",
          "submitProposal(bytes,uint32,uint256,string)",
          "sponsorProposal(uint32)",
          "submitVote(uint32,bool)",
          "submitVoteWithSig(address,uint256,uint256,uint32,bool,uint8,bytes32,bytes32)",
          "processProposal(uint32,bytes)",
          "cancelProposal(uint32)",
          "executeAsBaal(address,uint256,bytes)",
          "ragequit(address,uint256,uint256,address[])",
          "setShamans(address[],uint256[])",
          "lockAdmin()",
          "lockManager()",
          "lockGovernor()",
          "lockRagequit()",
          "setAdminConfig(bool,bool)",
          "mintShares(address[],uint256[])",
          "burnShares(address[],uint256[])",
          "mintLoot(address[],uint256[])",
          "burnLoot(address[],uint256[])",
          "setGovernanceConfig(bytes)",
          "setTrustedForwarder(address)",
          "state(uint32)",
          "getProposalStatus(uint32)",
          "isAdmin(address)",
          "isManager(address)",
          "isGovernor(address)",
          "totalLoot()",
          "totalShares()",
          "totalSupply()",
          "hashOperation(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Baal",
            "src": "contracts/fixtures/Baal/Baal.sol:231"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "guard",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Guardable",
              "src": "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:10"
            },
            {
              "label": "avatar",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "Module",
              "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:12"
            },
            {
              "label": "target",
              "offset": 0,
              "slot": "103",
              "type": "t_address",
              "contract": "Module",
              "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:14"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "104",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "105",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "106",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "156",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "157",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "206",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            },
            {
              "label": "lootToken",
              "offset": 0,
              "slot": "207",
              "type": "t_contract(IBaalToken)14734",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:30"
            },
            {
              "label": "sharesToken",
              "offset": 0,
              "slot": "208",
              "type": "t_contract(IBaalToken)14734",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:32"
            },
            {
              "label": "votingPeriod",
              "offset": 20,
              "slot": "208",
              "type": "t_uint32",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:35"
            },
            {
              "label": "gracePeriod",
              "offset": 24,
              "slot": "208",
              "type": "t_uint32",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:37"
            },
            {
              "label": "proposalCount",
              "offset": 28,
              "slot": "208",
              "type": "t_uint32",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:38"
            },
            {
              "label": "proposalOffering",
              "offset": 0,
              "slot": "209",
              "type": "t_uint256",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:39"
            },
            {
              "label": "quorumPercent",
              "offset": 0,
              "slot": "210",
              "type": "t_uint256",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:40"
            },
            {
              "label": "sponsorThreshold",
              "offset": 0,
              "slot": "211",
              "type": "t_uint256",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:41"
            },
            {
              "label": "minRetentionPercent",
              "offset": 0,
              "slot": "212",
              "type": "t_uint256",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:41"
            },
            {
              "label": "adminLock",
              "offset": 0,
              "slot": "213",
              "type": "t_bool",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:45"
            },
            {
              "label": "managerLock",
              "offset": 1,
              "slot": "213",
              "type": "t_bool",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:46"
            },
            {
              "label": "governorLock",
              "offset": 2,
              "slot": "213",
              "type": "t_bool",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:46"
            },
            {
              "label": "ragequitLock",
              "offset": 3,
              "slot": "213",
              "type": "t_bool",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:48"
            },
            {
              "label": "shamans",
              "offset": 0,
              "slot": "214",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:49"
            },
            {
              "label": "memberVoted",
              "offset": 0,
              "slot": "215",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_bool))",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:60"
            },
            {
              "label": "votingNonces",
              "offset": 0,
              "slot": "216",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:62"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "217",
              "type": "t_mapping(t_uint256,t_struct(Proposal)10843_storage)",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:64"
            },
            {
              "label": "latestSponsoredProposalId",
              "offset": 0,
              "slot": "218",
              "type": "t_uint32",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:66"
            },
            {
              "label": "multisendLibrary",
              "offset": 4,
              "slot": "218",
              "type": "t_address",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:67"
            },
            {
              "label": "versionRecipient",
              "offset": 0,
              "slot": "219",
              "type": "t_string_storage",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bool)4_storage": {
              "label": "bool[4]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBaalToken)14734": {
              "label": "contract IBaalToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_bool))": {
              "label": "mapping(address => mapping(uint32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)10843_storage)": {
              "label": "mapping(uint256 => struct Baal.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_bool)": {
              "label": "mapping(uint32 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)10843_storage": {
              "label": "struct Baal.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevProposalId",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "votingStarts",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "votingEnds",
                  "type": "t_uint32",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "graceEnds",
                  "type": "t_uint32",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "expiration",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "baalGas",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "yesVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "noVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxTotalSharesAndLootAtVote",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "maxTotalSharesAtSponsor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_array(t_bool)4_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "sponsor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalDataHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/BaalSummoner.sol:BaalSummoner": {
        "src": "contracts/fixtures/Baal/BaalSummoner.sol:13",
        "version": {
          "withMetadata": "7b9713d1c3a072b91c8360e446c1c8d07dc9ed60ebb4164827f4926354a1aa87",
          "withoutMetadata": "7a15c707d1120e7ab51edb14d904a42f12481dddd3a962164a26e15baa804f98",
          "linkedWithoutMetadata": "7a15c707d1120e7ab51edb14d904a42f12481dddd3a962164a26e15baa804f98"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setAddrs(address payable,address,address,address,address,address,address,address)",
          "encodeMultisend(bytes[],address)",
          "summonBaal(bytes,bytes[],uint256)",
          "summonBaalFromReferrer(bytes,bytes[],uint256,bytes32)",
          "deployTokens(string,string)",
          "deployAndSetupSafe(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "addrsVersion",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:15"
            },
            {
              "label": "template",
              "offset": 0,
              "slot": "202",
              "type": "t_address_payable",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:17"
            },
            {
              "label": "gnosisSingleton",
              "offset": 0,
              "slot": "203",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:20"
            },
            {
              "label": "gnosisFallbackLibrary",
              "offset": 0,
              "slot": "204",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:23"
            },
            {
              "label": "gnosisMultisendLibrary",
              "offset": 0,
              "slot": "205",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:26"
            },
            {
              "label": "lootSingleton",
              "offset": 0,
              "slot": "206",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:29"
            },
            {
              "label": "sharesSingleton",
              "offset": 0,
              "slot": "207",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:32"
            },
            {
              "label": "gnosisSafeProxyFactory",
              "offset": 0,
              "slot": "208",
              "type": "t_contract(GnosisSafeProxyFactory)3163",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:36"
            },
            {
              "label": "moduleProxyFactory",
              "offset": 0,
              "slot": "209",
              "type": "t_contract(ModuleProxyFactory)3588",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(GnosisSafeProxyFactory)3163": {
              "label": "contract GnosisSafeProxyFactory",
              "numberOfBytes": "20"
            },
            "t_contract(ModuleProxyFactory)3588": {
              "label": "contract ModuleProxyFactory",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/LootERC20.sol:Loot": {
        "src": "contracts/fixtures/Baal/LootERC20.sol:12",
        "version": {
          "withMetadata": "5a94b497f908717ae881cbdfddf179e8e6066473b0d2821a5beaece1b9e5e676",
          "withoutMetadata": "27110ef1309887ed395e42e1a4671e6bf3d94ee54f45fb0d3633aa14e447ac44",
          "linkedWithoutMetadata": "27110ef1309887ed395e42e1a4671e6bf3d94ee54f45fb0d3633aa14e447ac44"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setUp(string,string)",
          "snapshot()",
          "getCurrentSnapshotId()",
          "pause()",
          "unpause()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Loot",
            "src": "contracts/fixtures/Baal/LootERC20.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(Snapshots)6145_storage)",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:62"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(Snapshots)6145_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:63"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Counter)7195_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:66"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:207"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "151",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "152",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "204",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "205",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "254",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "304",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "354",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "404",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)6145_storage)": {
              "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)6145_storage": {
              "label": "struct ERC20SnapshotUpgradeable.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/SharesERC20.sol:Shares": {
        "src": "contracts/fixtures/Baal/SharesERC20.sol:18",
        "version": {
          "withMetadata": "012e1da51deba17940ef06966bc3b30a0a0e0cb042b92c88859d3f55d5fe2013",
          "withoutMetadata": "00715702c30ae071f84972b2b04ecef55d515b0995b757af7c6273ea3a6014f3",
          "linkedWithoutMetadata": "00715702c30ae071f84972b2b04ecef55d515b0995b757af7c6273ea3a6014f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
          "contracts/fixtures/Baal/utils/BaalVotes.sol:BaalVotes",
          "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:DelegationEIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setUp(string,string)",
          "pause()",
          "unpause()",
          "snapshot()",
          "getCurrentSnapshotId()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Shares",
            "src": "contracts/fixtures/Baal/SharesERC20.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_HASHED_NAME_DELEGATION",
              "offset": 0,
              "slot": "204",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION_DELEGATION",
              "offset": 0,
              "slot": "205",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "206",
              "type": "t_array(t_uint256)50_storage",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:120"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:27"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:28"
            },
            {
              "label": "delegates",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:29"
            },
            {
              "label": "delegationNonces",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:30"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_address,t_struct(Snapshots)6145_storage)",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:62"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "261",
              "type": "t_struct(Snapshots)6145_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:63"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "263",
              "type": "t_struct(Counter)7195_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:66"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "264",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:207"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "310",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "311",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "360",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "361",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "410",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "460",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))": {
              "label": "mapping(address => mapping(uint256 => struct BaalVotes.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)6145_storage)": {
              "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Checkpoint)15372_storage)": {
              "label": "mapping(uint256 => struct BaalVotes.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)15372_storage": {
              "label": "struct BaalVotes.Checkpoint",
              "members": [
                {
                  "label": "fromTimePoint",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)6145_storage": {
              "label": "struct ERC20SnapshotUpgradeable.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/interfaces/IBaal.sol:IBaal": {
        "src": "contracts/fixtures/Baal/interfaces/IBaal.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnLoot(address[],uint256[])",
          "burnShares(address[],uint256[])",
          "mintLoot(address[],uint256[])",
          "mintShares(address[],uint256[])",
          "setAdminConfig(bool,bool)",
          "setGovernanceConfig(bytes)",
          "shamans(address)",
          "isManager(address)",
          "target()",
          "totalSupply()",
          "sharesToken()",
          "lootToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/interfaces/IBaalToken.sol:IBaalToken": {
        "src": "contracts/fixtures/Baal/interfaces/IBaalToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "setUp(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()",
          "paused()",
          "transferOwnership(address)",
          "owner()",
          "balanceOf(address)",
          "totalSupply()",
          "snapshot()",
          "getCurrentSnapshotId()",
          "totalSupplyAt(uint256)",
          "getPastVotes(address,uint256)",
          "numCheckpoints(address)",
          "getCheckpoint(address,uint256)",
          "getVotes(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/BaalLessToken.sol:BaalLessShares": {
        "src": "contracts/fixtures/Baal/mock/BaalLessToken.sol:16",
        "version": {
          "withMetadata": "8aac5c4d5f9c7db0277e0459c297db4cc6111e2ff1ccac65f23559fbc35ed597",
          "withoutMetadata": "7738e4b7c01b7c3cb83907354eb4431b206784d5036d179bda52b8c7043fb248",
          "linkedWithoutMetadata": "7738e4b7c01b7c3cb83907354eb4431b206784d5036d179bda52b8c7043fb248"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "contracts/fixtures/Baal/utils/BaalVotes.sol:BaalVotes",
          "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:DelegationEIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setUp(uint8)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaalLessShares",
            "src": "contracts/fixtures/Baal/mock/BaalLessToken.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_HASHED_NAME_DELEGATION",
              "offset": 0,
              "slot": "204",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION_DELEGATION",
              "offset": 0,
              "slot": "205",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "206",
              "type": "t_array(t_uint256)50_storage",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:120"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:27"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:28"
            },
            {
              "label": "delegates",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:29"
            },
            {
              "label": "delegationNonces",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:30"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "260",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "261",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "310",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "360",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "baal",
              "offset": 0,
              "slot": "410",
              "type": "t_contract(IBaal)14612",
              "contract": "BaalLessShares",
              "src": "contracts/fixtures/Baal/mock/BaalLessToken.sol:18"
            },
            {
              "label": "version",
              "offset": 20,
              "slot": "410",
              "type": "t_uint8",
              "contract": "BaalLessShares",
              "src": "contracts/fixtures/Baal/mock/BaalLessToken.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBaal)14612": {
              "label": "contract IBaal",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))": {
              "label": "mapping(address => mapping(uint256 => struct BaalVotes.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Checkpoint)15372_storage)": {
              "label": "mapping(uint256 => struct BaalVotes.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)15372_storage": {
              "label": "struct BaalVotes.Checkpoint",
              "members": [
                {
                  "label": "fromTimePoint",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/MockBaal.sol:MockBaal": {
        "src": "contracts/fixtures/Baal/mock/MockBaal.sol:8",
        "version": {
          "withMetadata": "68f021d1dd5df169e03b4f4bd8d5188aeacaab74feb60ddd37123d14b69d1c6a",
          "withoutMetadata": "9095af0d1c082dc26b821cd1e052fb82dcee71574beeeec9cb49fa245055d290",
          "linkedWithoutMetadata": "9095af0d1c082dc26b821cd1e052fb82dcee71574beeeec9cb49fa245055d290"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/proxy/Clones.sol:Clones"
        ],
        "methods": [
          "(address payable,string,string)",
          "setLootPaused(bool)",
          "mintLoot(address,uint256)",
          "burnLoot(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockBaal",
            "src": "contracts/fixtures/Baal/mock/MockBaal.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "lootPaused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockBaal",
              "src": "contracts/fixtures/Baal/mock/MockBaal.sol:9"
            },
            {
              "label": "lootToken",
              "offset": 1,
              "slot": "0",
              "type": "t_contract(IBaalToken)14734",
              "contract": "MockBaal",
              "src": "contracts/fixtures/Baal/mock/MockBaal.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IBaalToken)14734": {
              "label": "contract IBaalToken",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/TestAvatar.sol:Enum": {
        "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:4",
        "version": {
          "withMetadata": "a574896cfe9cac53b2e30c4f4728d1996eecf85bb5b2174fdecdcfd65329f6ed",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/TestAvatar.sol:TestAvatar": {
        "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:11",
        "version": {
          "withMetadata": "17be3a0f0bb34d5df20e9537ad338c481c4a1da09b68311bef0f5598a952440a",
          "withoutMetadata": "c00f39b92aba3b316d49cc73479f96da68c49632366b08decad872de6285a3d5",
          "linkedWithoutMetadata": "c00f39b92aba3b316d49cc73479f96da68c49632366b08decad872de6285a3d5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "enableModule(address)",
          "disableModule(address,address)",
          "isModuleEnabled(address)",
          "execTransactionFromModule(address payable,uint256,bytes,uint8)",
          "execTransactionFromModuleReturnData(address payable,uint256,bytes,uint8)",
          "getModulesPaginated(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:39"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "module",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TestAvatar",
              "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/TestERC20.sol:TestERC20": {
        "src": "contracts/fixtures/Baal/mock/TestERC20.sol:5",
        "version": {
          "withMetadata": "19c2163df10ccb4690d68e5de5e631f05991190620a36626279bbda5cd697a60",
          "withoutMetadata": "ffac6d0607e0cd61673ddcfb60ab9887dca9cbc1d3f6119aa4976028032b62e4",
          "linkedWithoutMetadata": "ffac6d0607e0cd61673ddcfb60ab9887dca9cbc1d3f6119aa4976028032b62e4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "contracts/fixtures/Baal/mock/TestERC20.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:6"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:7"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:9"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:11"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/utils/BaalVotes.sol:BaalVotes": {
        "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:17",
        "inherit": [
          "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:DelegationEIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "now()",
          "getPastVotes(address,uint256)",
          "getVotes(address)",
          "getCheckpoint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_HASHED_NAME_DELEGATION",
              "offset": 0,
              "slot": "204",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION_DELEGATION",
              "offset": 0,
              "slot": "205",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "206",
              "type": "t_array(t_uint256)50_storage",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:120"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:27"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:28"
            },
            {
              "label": "delegates",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:29"
            },
            {
              "label": "delegationNonces",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))": {
              "label": "mapping(address => mapping(uint256 => struct BaalVotes.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Checkpoint)15372_storage)": {
              "label": "mapping(uint256 => struct BaalVotes.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)15372_storage": {
              "label": "struct BaalVotes.Checkpoint",
              "members": [
                {
                  "label": "fromTimePoint",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:DelegationEIP712Upgradeable": {
        "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME_DELEGATION",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION_DELEGATION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/utils/Poster.sol:Poster": {
        "src": "contracts/fixtures/Baal/utils/Poster.sol:23",
        "version": {
          "withMetadata": "90836521fc0907706cd17a971cdc9fad6c13665fb7afb05b9b25f5e7e35c636c",
          "withoutMetadata": "92a678b2b2e5deb53b54652d6431c6e5b7943e820ed03e6c77a21001584ff806",
          "linkedWithoutMetadata": "92a678b2b2e5deb53b54652d6431c6e5b7943e820ed03e6c77a21001584ff806"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "post(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/mock/MyToken.sol:MyToken": {
        "src": "contracts/mock/MyToken.sol:7",
        "version": {
          "withMetadata": "e5bacc99bcc82621a24c48cca8e81ec1a2a77041de7c436c0841f25e9b9331f6",
          "withoutMetadata": "2ed3d9d0d1f191dd379ec65c2d5c2f8aa0c08bac7d519d736b0b8225f4346147",
          "linkedWithoutMetadata": "2ed3d9d0d1f191dd379ec65c2d5c2f8aa0c08bac7d519d736b0b8225f4346147"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyToken",
            "src": "contracts/mock/MyToken.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/shaman/DeVoxShaman.sol:DeVoxShamanSummonerV1": {
        "src": "contracts/shaman/DeVoxShaman.sol:229",
        "version": {
          "withMetadata": "fd4f2e51a7cd51015b72bc6aa39bdcf2cb0b85ebcf6e4b516f9b753282d91447",
          "withoutMetadata": "46734af9cc1d90a66fa4c263fed994e7dce84fd4e36ba8789ec4fad0f4a98d6b",
          "linkedWithoutMetadata": "46734af9cc1d90a66fa4c263fed994e7dce84fd4e36ba8789ec4fad0f4a98d6b"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/proxy/Clones.sol:Clones"
        ],
        "methods": [
          "(address payable)",
          "summonDeVoxShaman(address,address payable,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeVoxShamanSummonerV1",
            "src": "contracts/shaman/DeVoxShaman.sol:242"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "template",
              "offset": 0,
              "slot": "0",
              "type": "t_address_payable",
              "contract": "DeVoxShamanSummonerV1",
              "src": "contracts/shaman/DeVoxShaman.sol:230"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/shaman/DeVoxShaman.sol:DeVoxShamanV1": {
        "src": "contracts/shaman/DeVoxShaman.sol:13",
        "version": {
          "withMetadata": "30bca64488cfd61dc3297651bfd7f7703bb95afa1eb09397ff5326660d86335b",
          "withoutMetadata": "f177e0859374174069cfe36db78c0706b45915e0852c7122ebe41edfce72f8bd",
          "linkedWithoutMetadata": "f177e0859374174069cfe36db78c0706b45915e0852c7122ebe41edfce72f8bd"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address payable,uint256,uint256,uint256,uint256)",
          "donate(uint256,string)",
          "getTokenBalance()",
          "setTarget(uint256)",
          "version()",
          "updateVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)4010_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "252",
              "type": "t_uint16",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:42"
            },
            {
              "label": "baal",
              "offset": 2,
              "slot": "252",
              "type": "t_contract(IBaal)14612",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:44"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "253",
              "type": "t_contract(IERC20)10279",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:45"
            },
            {
              "label": "pricePerUnit",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:46"
            },
            {
              "label": "lootPerUnit",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:47"
            },
            {
              "label": "sharesPerMember",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:48"
            },
            {
              "label": "target",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:49"
            },
            {
              "label": "donations",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBaal)14612": {
              "label": "contract IBaal",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)10279": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)4010_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)4010_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      }
    },
    {
      "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:GnosisSafe": {
        "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:19",
        "version": {
          "withMetadata": "df0400de7abdfc29840e3bd65cbc68f894f70a7feedc3c83fdc07fb840313715",
          "withoutMetadata": "7122f5c5071d8814d8e7bf64e4eb4e124c897971e4372227abd1812afd3dc11d",
          "linkedWithoutMetadata": "7122f5c5071d8814d8e7bf64e4eb4e124c897971e4372227abd1812afd3dc11d"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:GuardManager",
          "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol:StorageAccessible",
          "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol:FallbackManager",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidatorConstants",
          "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol:SecuredTokenTransfer",
          "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol:SignatureDecoder",
          "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:OwnerManager",
          "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:ModuleManager",
          "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:Executor",
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized",
          "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:Singleton",
          "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol:EtherPaymentFallback"
        ],
        "libraries": [
          "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol:GnosisSafeMath"
        ],
        "methods": [
          "()",
          "setup(address[],uint256,address,bytes,address,address,uint256,address payable)",
          "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes)",
          "checkSignatures(bytes32,bytes,bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "requiredTxGas(address,uint256,bytes,uint8)",
          "approveHash(bytes32)",
          "getChainId()",
          "domainSeparator()",
          "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)",
          "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafe",
            "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:59"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Singleton",
              "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:10"
            },
            {
              "label": "modules",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ModuleManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:18"
            },
            {
              "label": "owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:15"
            },
            {
              "label": "ownerCount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:16"
            },
            {
              "label": "threshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:17"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GnosisSafe",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:51"
            },
            {
              "label": "_deprecatedDomainSeparator",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "GnosisSafe",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:52"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "GnosisSafe",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:54"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "GnosisSafe",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:Executor": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:7",
        "version": {
          "withMetadata": "852d9b32abc1966770abdd3560dbd6e73ba3b047d9b69f8ed2425dd907a5ad48",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol:FallbackManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol:8",
        "version": {
          "withMetadata": "ce427a3cc566304b5fdd36bbe935877d4a5577b0343f284a33f9d017d53fd663",
          "withoutMetadata": "cc004296d7d999632667e63dcc6e22c0f0e21f367b250b7d52eedecdfd6fd767",
          "linkedWithoutMetadata": "cc004296d7d999632667e63dcc6e22c0f0e21f367b250b7d52eedecdfd6fd767"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "setFallbackHandler(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:Guard": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes,address)",
          "checkAfterExecution(bytes32,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:GuardManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:27",
        "version": {
          "withMetadata": "e9cc5ed113b1a9b923b3bb62cbfdab371f521008a9d6d780b3b9a8382370a3fa",
          "withoutMetadata": "c40fff295ce1ebab796f4c29403e8c53d777ee8b8a75c145866f299647141bb4",
          "linkedWithoutMetadata": "c40fff295ce1ebab796f4c29403e8c53d777ee8b8a75c145866f299647141bb4"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "setGuard(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:ModuleManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:10",
        "version": {
          "withMetadata": "0892158a4bd5f81c9c7f5d7e547897314eb61096d83b7732ca9bc22e2f08e55b",
          "withoutMetadata": "e08bce33dc8c2878cbebdd0ddaea38c6aaf0511cb7860223141a418a83cdf658",
          "linkedWithoutMetadata": "e08bce33dc8c2878cbebdd0ddaea38c6aaf0511cb7860223141a418a83cdf658"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:Executor",
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "enableModule(address)",
          "disableModule(address,address)",
          "execTransactionFromModule(address,uint256,bytes,uint8)",
          "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)",
          "isModuleEnabled(address)",
          "getModulesPaginated(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "modules",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "ModuleManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:OwnerManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:8",
        "version": {
          "withMetadata": "44f0e491c7249071df41fd4d3b07e9dac3d89ad8ed843aa8b39532511a005aaf",
          "withoutMetadata": "5234b6f062926dcebf881b8cca5a6558b958396718e58e10b889d6078eed93c2",
          "linkedWithoutMetadata": "5234b6f062926dcebf881b8cca5a6558b958396718e58e10b889d6078eed93c2"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "addOwnerWithThreshold(address,uint256)",
          "removeOwner(address,address,uint256)",
          "swapOwner(address,address,address)",
          "changeThreshold(uint256)",
          "getThreshold()",
          "isOwner(address)",
          "getOwners()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owners",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_address)",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:15"
            },
            {
              "label": "ownerCount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:16"
            },
            {
              "label": "threshold",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "OwnerManager",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/Enum.sol:Enum": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/Enum.sol:6",
        "version": {
          "withMetadata": "e806232abff69dfc721904a94e72f121277a35adb94c9802802fed41ad93f8c7",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol:EtherPaymentFallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol:6",
        "version": {
          "withMetadata": "9c8d32f60cd93a9c5b93af170e7fdab9156dfb8e8b32bf8fe512bce7029df584",
          "withoutMetadata": "2df5b0a6e815736a589f0331577b6d497e1b407aaa2113a81067671b40e55a4b",
          "linkedWithoutMetadata": "2df5b0a6e815736a589f0331577b6d497e1b407aaa2113a81067671b40e55a4b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol:SecuredTokenTransfer": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol:6",
        "version": {
          "withMetadata": "1b3b750de5b14082add88ac3a53603c0a4a7607068edb381d85fd97b35b3215b",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:SelfAuthorized": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:6",
        "version": {
          "withMetadata": "2e6dfcbd6d11feaa6ed119b4b539674fdcf3bad0698a466cb891ae8f6d213713",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol:SignatureDecoder": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol:6",
        "version": {
          "withMetadata": "00d91cd33a16ed08a958aa5fc94a4c8ab281aba7d4f80384b60d304394dea1df",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:Singleton": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:7",
        "version": {
          "withMetadata": "9803d31353377db343f6856f66844e4a44ba2b8416458d3614d817bf5686086c",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Singleton",
              "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol:StorageAccessible": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol:6",
        "version": {
          "withMetadata": "35c866679e1a6ad2f1980d8c5ff2b1a2150c7fca0eb1241c01e9610fd0e93ec9",
          "withoutMetadata": "a54e4aea5f467ad25444928af36a5c5a393fde64d04eff518368c1ef14981489",
          "linkedWithoutMetadata": "a54e4aea5f467ad25444928af36a5c5a393fde64d04eff518368c1ef14981489"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageAt(uint256,uint256)",
          "simulateAndRevert(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:GnosisSafeStorage": {
        "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:6",
        "version": {
          "withMetadata": "98c23d6ec11523001db3fdaac773937e390b702e27084c5224517f318b0d4fd0",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:8"
            },
            {
              "label": "modules",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:10"
            },
            {
              "label": "owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:12"
            },
            {
              "label": "ownerCount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:13"
            },
            {
              "label": "threshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:14"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "5",
              "type": "t_bytes32",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:17"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:18"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:19"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/examples/libraries/SignMessage.sol:SignMessageLib": {
        "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/SignMessage.sol:9",
        "version": {
          "withMetadata": "aa14b695d7b8c8ea3414a342f51ff7bc9b4518e11273381570f4e08101992862",
          "withoutMetadata": "850d996ad4594c455c1bc49353e769d93f8635db93eab527e26e2e269786e214",
          "linkedWithoutMetadata": "850d996ad4594c455c1bc49353e769d93f8635db93eab527e26e2e269786e214"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:GnosisSafeStorage"
        ],
        "libraries": [],
        "methods": [
          "signMessage(bytes)",
          "getMessageHash(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:8"
            },
            {
              "label": "modules",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:10"
            },
            {
              "label": "owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_address)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:12"
            },
            {
              "label": "ownerCount",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:13"
            },
            {
              "label": "threshold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:14"
            },
            {
              "label": "nonce",
              "offset": 0,
              "slot": "5",
              "type": "t_bytes32",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:17"
            },
            {
              "label": "domainSeparator",
              "offset": 0,
              "slot": "6",
              "type": "t_bytes32",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:18"
            },
            {
              "label": "signedMessages",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:19"
            },
            {
              "label": "approvedHashes",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "contract": "GnosisSafeStorage",
              "src": "@gnosis.pm/safe-contracts/contracts/examples/libraries/GnosisSafeStorage.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol:GnosisSafeMath": {
        "src": "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol:10",
        "version": {
          "withMetadata": "e0b11c5ac9cb4814bbccc23d0bc233a7e60b961db03b010c6bb2b2db84f8d0b7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol:CompatibilityFallbackHandler": {
        "src": "@gnosis.pm/safe-contracts/contracts/handler/CompatibilityFallbackHandler.sol:10",
        "version": {
          "withMetadata": "5c7bab422db575d066b8e1b9fc326448c2ac6848c49e971321fba682006613b7",
          "withoutMetadata": "b78733dbdbd750500e2878d8eaca1437c8adab378f4458ce841278d7a4531da7",
          "linkedWithoutMetadata": "b78733dbdbd750500e2878d8eaca1437c8adab378f4458ce841278d7a4531da7"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidator",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidatorConstants",
          "@gnosis.pm/safe-contracts/contracts/handler/DefaultCallbackHandler.sol:DefaultCallbackHandler",
          "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol:IERC165",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol:ERC721TokenReceiver",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol:ERC777TokensRecipient",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol:ERC1155TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)",
          "getMessageHash(bytes)",
          "getMessageHashForSafe(address,bytes)",
          "isValidSignature(bytes32,bytes)",
          "getModules()",
          "simulate(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/handler/DefaultCallbackHandler.sol:DefaultCallbackHandler": {
        "src": "@gnosis.pm/safe-contracts/contracts/handler/DefaultCallbackHandler.sol:11",
        "version": {
          "withMetadata": "56c07df8eaa6fd74d623bd5d57cad716d6b8ef9b4c6c077496bda82250ff9693",
          "withoutMetadata": "8624de4c7d60e1621a702613663efd5ffe119f2d66c0bda107a705d6a4bb85d7",
          "linkedWithoutMetadata": "8624de4c7d60e1621a702613663efd5ffe119f2d66c0bda107a705d6a4bb85d7"
        },
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol:IERC165",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol:ERC721TokenReceiver",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol:ERC777TokensRecipient",
          "@gnosis.pm/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol:ERC1155TokenReceiver"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "tokensReceived(address,address,address,uint256,bytes,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol:ERC1155TokenReceiver": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ERC1155TokenReceiver.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol:ERC721TokenReceiver": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ERC721TokenReceiver.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol:ERC777TokensRecipient": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ERC777TokensRecipient.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "tokensReceived(address,address,address,uint256,bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol:IERC165": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidator": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:9",
        "inherit": [
          "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:ISignatureValidatorConstants": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:4",
        "version": {
          "withMetadata": "c0f636ab713ca877e0e40b8d8322f866899b50c275bbfee8a972049def5f8642",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol:MultiSend": {
        "src": "@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol:9",
        "version": {
          "withMetadata": "a504cf36e6557dda883eea2fc834b81958ebba5d5fdec3bbf09fdadca582f58d",
          "withoutMetadata": "955bfd4ec5b09aa36801eb71a4548dd2beab00635a0b0d9546e2af7ba238e197",
          "linkedWithoutMetadata": "955bfd4ec5b09aa36801eb71a4548dd2beab00635a0b0d9546e2af7ba238e197"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "multiSend(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MultiSend",
            "src": "@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "multisendSingleton",
            "src": "@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol:10"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:GnosisSafeProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:13",
        "version": {
          "withMetadata": "2fdd6dc81bdd1c79cbbd9ef575c82c52fcb903ad371bde5f911c3f8a715ef4d6",
          "withoutMetadata": "1df740ef3a28d33093ea03939152ecd810da18058a3f8931a9dc2a9d9aae2254",
          "linkedWithoutMetadata": "1df740ef3a28d33093ea03939152ecd810da18058a3f8931a9dc2a9d9aae2254"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafeProxy",
            "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "singleton",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "GnosisSafeProxy",
              "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:IProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "masterCopy()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol:GnosisSafeProxyFactory": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol:9",
        "version": {
          "withMetadata": "171014a56f7bf1c58ed8b4eef9404860c4d9376f9f97b1178d56ec70927bd974",
          "withoutMetadata": "02ed90baf6be5ad141de58a7b42f44a5ec20935e39429c6ac92b635720113fb8",
          "linkedWithoutMetadata": "02ed90baf6be5ad141de58a7b42f44a5ec20935e39429c6ac92b635720113fb8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createProxy(address,bytes)",
          "proxyRuntimeCode()",
          "proxyCreationCode()",
          "createProxyWithNonce(address,bytes,uint256)",
          "createProxyWithCallback(address,bytes,uint256,address)",
          "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol:IProxyCreationCallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxyCreated(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/core/Module.sol:Module": {
        "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:10",
        "inherit": [
          "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:Guardable",
          "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol:FactoryFriendly",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setAvatar(address)",
          "setTarget(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "guard",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Guardable",
              "src": "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:10"
            },
            {
              "label": "avatar",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "Module",
              "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:12"
            },
            {
              "label": "target",
              "offset": 0,
              "slot": "103",
              "type": "t_address",
              "contract": "Module",
              "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol:FactoryFriendly": {
        "src": "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol:8",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setUp(bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol:ModuleProxyFactory": {
        "src": "@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol:4",
        "version": {
          "withMetadata": "90a4653938cf5d3068f55a69b56b30ae036bb6e0a0cf86cfafa3feb6f1638f89",
          "withoutMetadata": "e3cf0f298bc568f366a732b7ac7a0f413ecadaaa5b9d258603de3cbac21bfd6e",
          "linkedWithoutMetadata": "e3cf0f298bc568f366a732b7ac7a0f413ecadaaa5b9d258603de3cbac21bfd6e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deployModule(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol:BaseGuard": {
        "src": "@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol:8",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes,address)",
          "checkAfterExecution(bytes32,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:Guardable": {
        "src": "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:9",
        "version": {
          "withMetadata": "9d2a6c2446a2875f336c62bec4ba7a99d796c6f96382ff7a2a90bc49b35296fe",
          "withoutMetadata": "402d869368dc8de43273bd013d07acde8dc6ac48dad0ee0f82b2cd9d577a9afe",
          "linkedWithoutMetadata": "402d869368dc8de43273bd013d07acde8dc6ac48dad0ee0f82b2cd9d577a9afe"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "setGuard(address)",
          "getGuard()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "guard",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Guardable",
              "src": "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol:IAvatar": {
        "src": "@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "enableModule(address)",
          "disableModule(address,address)",
          "execTransactionFromModule(address,uint256,bytes,uint8)",
          "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)",
          "isModuleEnabled(address)",
          "getModulesPaginated(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol:IGuard": {
        "src": "@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes,address)",
          "checkAfterExecution(bytes32,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@opengsn/contracts/src/BaseRelayRecipient.sol:BaseRelayRecipient": {
        "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:11",
        "inherit": [
          "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:IRelayRecipient"
        ],
        "libraries": [],
        "methods": [
          "trustedForwarder()",
          "isTrustedForwarder(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:IRelayRecipient": {
        "src": "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isTrustedForwarder(address)",
          "versionRecipient()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:50",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)4010_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "102",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)4010_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)4010_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:22",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "51",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "51",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36",
        "version": {
          "withMetadata": "87fd4cc82fe59b795cbe0b97f2e3f9b493095dbf6e3646751507c7683e45044d",
          "withoutMetadata": "44c9d5e639f1b3f8236ee706abb7a8715f1bff7582fe7bcb3dcb2361bd490796",
          "linkedWithoutMetadata": "44c9d5e639f1b3f8236ee706abb7a8715f1bff7582fe7bcb3dcb2361bd490796"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:43",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol:ArraysUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:CountersUpgradeable"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(Snapshots)6145_storage)",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:62"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(Snapshots)6145_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:63"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Counter)7195_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:66"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:207"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)6145_storage)": {
              "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)6145_storage": {
              "label": "struct ERC20SnapshotUpgradeable.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:13",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:CountersUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "9b84f567a3dd47fe266f3433dcc569dddd5dd92b0e7b53f401f852f12561a11d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol:ArraysUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ArraysUpgradeable.sol:12",
        "version": {
          "withMetadata": "b01e1a21a27feb1af75f201018c0cad7d8cc17ed3860d2a4954d19abaa71c04d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:14",
        "version": {
          "withMetadata": "44f02b768f0c99261840f530cfaf96edacee9cf4a0edda9a722bea12b3a96977",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d37bbe75e389067b76b4b37e3f6095a8c01502a7ea34e3399b608a5ce6e4d2c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "bd669bd622fe0d358fb0e67076b1a6b95adccbd41b2cdf69fa8ef0618e373fbf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "e6ba5337024a283183a039132896b7b83771e5c4832b646557f49b2e97ffccf6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "a7b319dfd4d2634d7389b3484b8470f2a7923a940d35e7f06353e0ab80a89331",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin/contracts/interfaces/IERC1967.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:IERC1822Proxiable": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC1822.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/Clones.sol:Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:19",
        "version": {
          "withMetadata": "de13a117a77091ec6538148dda17ec9bfb80c78c3b1b2521edf475f09d8c7469",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:ERC1967Proxy": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:15",
        "version": {
          "withMetadata": "be41ee8156d7718dac5391604a90d666292923c4fc90bc8fd55f5f5d679603e4",
          "withoutMetadata": "be41ee8156d7718dac5391604a90d666292923c4fc90bc8fd55f5f5d679603e4",
          "linkedWithoutMetadata": "be41ee8156d7718dac5391604a90d666292923c4fc90bc8fd55f5f5d679603e4"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade",
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967",
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1967Proxy",
            "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol:22"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:ERC1967Upgrade": {
        "src": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol:20",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "3243aef227de2717a6ffdbc7fa61f6473c151a3b2d68cad7e53e6190ff7f6ce5",
          "withoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d",
          "linkedWithoutMetadata": "c2254a604c012efca8a0325f856612e2fdf3654d34d17c1f624a567797479f6d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "21603e7a592e8e366a2c625ee7687f7ea51cd4c75fb1e11b88a73d98d17d62b6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:32",
        "version": {
          "withMetadata": "945f4b79445495470f8ed03bcf9fa07ede7453f447b395e5260c3c4c302ee311",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/Baal.sol:Baal": {
        "src": "contracts/fixtures/Baal/Baal.sol:25",
        "version": {
          "withMetadata": "b14285c442e9361415acadf54444b975337ce45226eaaac2fed057085ba3248b",
          "withoutMetadata": "026881ad92b7fd85ecf521a07bd5b244a857e0ebda6234ab00da963bf2f4e2b8",
          "linkedWithoutMetadata": "026881ad92b7fd85ecf521a07bd5b244a857e0ebda6234ab00da963bf2f4e2b8"
        },
        "inherit": [
          "@opengsn/contracts/src/BaseRelayRecipient.sol:BaseRelayRecipient",
          "@opengsn/contracts/src/interfaces/IRelayRecipient.sol:IRelayRecipient",
          "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@gnosis.pm/zodiac/contracts/core/Module.sol:Module",
          "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:Guardable",
          "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol:FactoryFriendly",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "encodeMultisend(bytes[],address)",
          "()",
          "setUp(bytes)",
          "submitProposal(bytes,uint32,uint256,string)",
          "sponsorProposal(uint32)",
          "submitVote(uint32,bool)",
          "submitVoteWithSig(address,uint256,uint256,uint32,bool,uint8,bytes32,bytes32)",
          "processProposal(uint32,bytes)",
          "cancelProposal(uint32)",
          "executeAsBaal(address,uint256,bytes)",
          "ragequit(address,uint256,uint256,address[])",
          "setShamans(address[],uint256[])",
          "lockAdmin()",
          "lockManager()",
          "lockGovernor()",
          "lockRagequit()",
          "setAdminConfig(bool,bool)",
          "mintShares(address[],uint256[])",
          "burnShares(address[],uint256[])",
          "mintLoot(address[],uint256[])",
          "burnLoot(address[],uint256[])",
          "setGovernanceConfig(bytes)",
          "setTrustedForwarder(address)",
          "state(uint32)",
          "getProposalStatus(uint32)",
          "isAdmin(address)",
          "isManager(address)",
          "isGovernor(address)",
          "totalLoot()",
          "totalShares()",
          "totalSupply()",
          "hashOperation(bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Baal",
            "src": "contracts/fixtures/Baal/Baal.sol:231"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "guard",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "Guardable",
              "src": "@gnosis.pm/zodiac/contracts/guard/Guardable.sol:10"
            },
            {
              "label": "avatar",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "Module",
              "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:12"
            },
            {
              "label": "target",
              "offset": 0,
              "slot": "103",
              "type": "t_address",
              "contract": "Module",
              "src": "@gnosis.pm/zodiac/contracts/core/Module.sol:14"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "104",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "105",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "106",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "156",
              "type": "t_uint256",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "157",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ReentrancyGuardUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
            },
            {
              "label": "_trustedForwarder",
              "offset": 0,
              "slot": "206",
              "type": "t_address",
              "contract": "BaseRelayRecipient",
              "src": "@opengsn/contracts/src/BaseRelayRecipient.sol:16"
            },
            {
              "label": "lootToken",
              "offset": 0,
              "slot": "207",
              "type": "t_contract(IBaalToken)14734",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:30"
            },
            {
              "label": "sharesToken",
              "offset": 0,
              "slot": "208",
              "type": "t_contract(IBaalToken)14734",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:32"
            },
            {
              "label": "votingPeriod",
              "offset": 20,
              "slot": "208",
              "type": "t_uint32",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:35"
            },
            {
              "label": "gracePeriod",
              "offset": 24,
              "slot": "208",
              "type": "t_uint32",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:37"
            },
            {
              "label": "proposalCount",
              "offset": 28,
              "slot": "208",
              "type": "t_uint32",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:38"
            },
            {
              "label": "proposalOffering",
              "offset": 0,
              "slot": "209",
              "type": "t_uint256",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:39"
            },
            {
              "label": "quorumPercent",
              "offset": 0,
              "slot": "210",
              "type": "t_uint256",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:40"
            },
            {
              "label": "sponsorThreshold",
              "offset": 0,
              "slot": "211",
              "type": "t_uint256",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:41"
            },
            {
              "label": "minRetentionPercent",
              "offset": 0,
              "slot": "212",
              "type": "t_uint256",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:41"
            },
            {
              "label": "adminLock",
              "offset": 0,
              "slot": "213",
              "type": "t_bool",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:45"
            },
            {
              "label": "managerLock",
              "offset": 1,
              "slot": "213",
              "type": "t_bool",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:46"
            },
            {
              "label": "governorLock",
              "offset": 2,
              "slot": "213",
              "type": "t_bool",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:46"
            },
            {
              "label": "ragequitLock",
              "offset": 3,
              "slot": "213",
              "type": "t_bool",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:48"
            },
            {
              "label": "shamans",
              "offset": 0,
              "slot": "214",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:49"
            },
            {
              "label": "memberVoted",
              "offset": 0,
              "slot": "215",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_bool))",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:60"
            },
            {
              "label": "votingNonces",
              "offset": 0,
              "slot": "216",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:62"
            },
            {
              "label": "proposals",
              "offset": 0,
              "slot": "217",
              "type": "t_mapping(t_uint256,t_struct(Proposal)10843_storage)",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:64"
            },
            {
              "label": "latestSponsoredProposalId",
              "offset": 0,
              "slot": "218",
              "type": "t_uint32",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:66"
            },
            {
              "label": "multisendLibrary",
              "offset": 4,
              "slot": "218",
              "type": "t_address",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:67"
            },
            {
              "label": "versionRecipient",
              "offset": 0,
              "slot": "219",
              "type": "t_string_storage",
              "contract": "Baal",
              "src": "contracts/fixtures/Baal/Baal.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bool)4_storage": {
              "label": "bool[4]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBaalToken)14734": {
              "label": "contract IBaalToken",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_bool))": {
              "label": "mapping(address => mapping(uint32 => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Proposal)10843_storage)": {
              "label": "mapping(uint256 => struct Baal.Proposal)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_bool)": {
              "label": "mapping(uint32 => bool)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Proposal)10843_storage": {
              "label": "struct Baal.Proposal",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "prevProposalId",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "votingStarts",
                  "type": "t_uint32",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "votingEnds",
                  "type": "t_uint32",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "graceEnds",
                  "type": "t_uint32",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "expiration",
                  "type": "t_uint32",
                  "offset": 20,
                  "slot": "0"
                },
                {
                  "label": "baalGas",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "yesVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "noVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maxTotalSharesAndLootAtVote",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "maxTotalSharesAtSponsor",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "status",
                  "type": "t_array(t_bool)4_storage",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "sponsor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "proposalDataHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/BaalSummoner.sol:BaalSummoner": {
        "src": "contracts/fixtures/Baal/BaalSummoner.sol:13",
        "version": {
          "withMetadata": "6ea7fdfed1bf10aa7db99ce2e7cad7d3215a63ce48bc563d8f8bf43899543141",
          "withoutMetadata": "ffe49f4ffdf23c5bac6ba1965f662c493dc2472c35bb23a337b5a6bba0bfa75a",
          "linkedWithoutMetadata": "ffe49f4ffdf23c5bac6ba1965f662c493dc2472c35bb23a337b5a6bba0bfa75a"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "setAddrs(address payable,address,address,address,address,address,address,address)",
          "encodeMultisend(bytes[],address)",
          "summonBaal(bytes,bytes[],uint256)",
          "summonBaalFromReferrer(bytes,bytes[],uint256,bytes32)",
          "deployTokens(string,string)",
          "deployAndSetupSafe(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "101",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "151",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "addrsVersion",
              "offset": 0,
              "slot": "201",
              "type": "t_uint256",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:15"
            },
            {
              "label": "template",
              "offset": 0,
              "slot": "202",
              "type": "t_address_payable",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:17"
            },
            {
              "label": "gnosisSingleton",
              "offset": 0,
              "slot": "203",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:20"
            },
            {
              "label": "gnosisFallbackLibrary",
              "offset": 0,
              "slot": "204",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:23"
            },
            {
              "label": "gnosisMultisendLibrary",
              "offset": 0,
              "slot": "205",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:26"
            },
            {
              "label": "lootSingleton",
              "offset": 0,
              "slot": "206",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:29"
            },
            {
              "label": "sharesSingleton",
              "offset": 0,
              "slot": "207",
              "type": "t_address",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:32"
            },
            {
              "label": "gnosisSafeProxyFactory",
              "offset": 0,
              "slot": "208",
              "type": "t_contract(GnosisSafeProxyFactory)3163",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:36"
            },
            {
              "label": "moduleProxyFactory",
              "offset": 0,
              "slot": "209",
              "type": "t_contract(ModuleProxyFactory)3588",
              "contract": "BaalSummoner",
              "src": "contracts/fixtures/Baal/BaalSummoner.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(GnosisSafeProxyFactory)3163": {
              "label": "contract GnosisSafeProxyFactory",
              "numberOfBytes": "20"
            },
            "t_contract(ModuleProxyFactory)3588": {
              "label": "contract ModuleProxyFactory",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/LootERC20.sol:Loot": {
        "src": "contracts/fixtures/Baal/LootERC20.sol:12",
        "version": {
          "withMetadata": "3cbe427e9d9bbf8231d4337db2aa09149afc4826bc8b00e5511ac3639194f6a9",
          "withoutMetadata": "27110ef1309887ed395e42e1a4671e6bf3d94ee54f45fb0d3633aa14e447ac44",
          "linkedWithoutMetadata": "27110ef1309887ed395e42e1a4671e6bf3d94ee54f45fb0d3633aa14e447ac44"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setUp(string,string)",
          "snapshot()",
          "getCurrentSnapshotId()",
          "pause()",
          "unpause()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Loot",
            "src": "contracts/fixtures/Baal/LootERC20.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "101",
              "type": "t_mapping(t_address,t_struct(Snapshots)6145_storage)",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:62"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "102",
              "type": "t_struct(Snapshots)6145_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:63"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "104",
              "type": "t_struct(Counter)7195_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:66"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:207"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "151",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "152",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "153",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "203",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "204",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "205",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "254",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "255",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "304",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "305",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "354",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "404",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)6145_storage)": {
              "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)6145_storage": {
              "label": "struct ERC20SnapshotUpgradeable.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/SharesERC20.sol:Shares": {
        "src": "contracts/fixtures/Baal/SharesERC20.sol:18",
        "version": {
          "withMetadata": "9cbdaa0659b944240d1d38e620217b2d4ee689ca2ac2622958071c528195323c",
          "withoutMetadata": "00715702c30ae071f84972b2b04ecef55d515b0995b757af7c6273ea3a6014f3",
          "linkedWithoutMetadata": "00715702c30ae071f84972b2b04ecef55d515b0995b757af7c6273ea3a6014f3"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:ERC20SnapshotUpgradeable",
          "contracts/fixtures/Baal/utils/BaalVotes.sol:BaalVotes",
          "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:DelegationEIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setUp(string,string)",
          "pause()",
          "unpause()",
          "snapshot()",
          "getCurrentSnapshotId()",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Shares",
            "src": "contracts/fixtures/Baal/SharesERC20.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_HASHED_NAME_DELEGATION",
              "offset": 0,
              "slot": "204",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION_DELEGATION",
              "offset": 0,
              "slot": "205",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "206",
              "type": "t_array(t_uint256)50_storage",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:120"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:27"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:28"
            },
            {
              "label": "delegates",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:29"
            },
            {
              "label": "delegationNonces",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:30"
            },
            {
              "label": "_accountBalanceSnapshots",
              "offset": 0,
              "slot": "260",
              "type": "t_mapping(t_address,t_struct(Snapshots)6145_storage)",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:62"
            },
            {
              "label": "_totalSupplySnapshots",
              "offset": 0,
              "slot": "261",
              "type": "t_struct(Snapshots)6145_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:63"
            },
            {
              "label": "_currentSnapshotId",
              "offset": 0,
              "slot": "263",
              "type": "t_struct(Counter)7195_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:66"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "264",
              "type": "t_array(t_uint256)46_storage",
              "contract": "ERC20SnapshotUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol:207"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "310",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "311",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "360",
              "type": "t_bool",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "361",
              "type": "t_array(t_uint256)49_storage",
              "contract": "PausableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "410",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "460",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)46_storage": {
              "label": "uint256[46]",
              "numberOfBytes": "1472"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))": {
              "label": "mapping(address => mapping(uint256 => struct BaalVotes.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Snapshots)6145_storage)": {
              "label": "mapping(address => struct ERC20SnapshotUpgradeable.Snapshots)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Checkpoint)15372_storage)": {
              "label": "mapping(uint256 => struct BaalVotes.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)15372_storage": {
              "label": "struct BaalVotes.Checkpoint",
              "members": [
                {
                  "label": "fromTimePoint",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Snapshots)6145_storage": {
              "label": "struct ERC20SnapshotUpgradeable.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/interfaces/IBaal.sol:IBaal": {
        "src": "contracts/fixtures/Baal/interfaces/IBaal.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "burnLoot(address[],uint256[])",
          "burnShares(address[],uint256[])",
          "mintLoot(address[],uint256[])",
          "mintShares(address[],uint256[])",
          "setAdminConfig(bool,bool)",
          "setGovernanceConfig(bytes)",
          "shamans(address)",
          "isManager(address)",
          "target()",
          "totalSupply()",
          "sharesToken()",
          "lootToken()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/interfaces/IBaalToken.sol:IBaalToken": {
        "src": "contracts/fixtures/Baal/interfaces/IBaalToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "setUp(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "pause()",
          "unpause()",
          "paused()",
          "transferOwnership(address)",
          "owner()",
          "balanceOf(address)",
          "totalSupply()",
          "snapshot()",
          "getCurrentSnapshotId()",
          "totalSupplyAt(uint256)",
          "getPastVotes(address,uint256)",
          "numCheckpoints(address)",
          "getCheckpoint(address,uint256)",
          "getVotes(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/BaalLessToken.sol:BaalLessShares": {
        "src": "contracts/fixtures/Baal/mock/BaalLessToken.sol:16",
        "version": {
          "withMetadata": "10b4cf5ca30bb7361fe3b97bf318745d8f8c8d584d34b35658497fa60270c2c2",
          "withoutMetadata": "7738e4b7c01b7c3cb83907354eb4431b206784d5036d179bda52b8c7043fb248",
          "linkedWithoutMetadata": "7738e4b7c01b7c3cb83907354eb4431b206784d5036d179bda52b8c7043fb248"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "contracts/fixtures/Baal/utils/BaalVotes.sol:BaalVotes",
          "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:DelegationEIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setUp(uint8)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BaalLessShares",
            "src": "contracts/fixtures/Baal/mock/BaalLessToken.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_HASHED_NAME_DELEGATION",
              "offset": 0,
              "slot": "204",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION_DELEGATION",
              "offset": 0,
              "slot": "205",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "206",
              "type": "t_array(t_uint256)50_storage",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:120"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:27"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:28"
            },
            {
              "label": "delegates",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:29"
            },
            {
              "label": "delegationNonces",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:30"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "260",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "261",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "310",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "360",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "baal",
              "offset": 0,
              "slot": "410",
              "type": "t_contract(IBaal)14612",
              "contract": "BaalLessShares",
              "src": "contracts/fixtures/Baal/mock/BaalLessToken.sol:18"
            },
            {
              "label": "version",
              "offset": 20,
              "slot": "410",
              "type": "t_uint8",
              "contract": "BaalLessShares",
              "src": "contracts/fixtures/Baal/mock/BaalLessToken.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBaal)14612": {
              "label": "contract IBaal",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))": {
              "label": "mapping(address => mapping(uint256 => struct BaalVotes.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Checkpoint)15372_storage)": {
              "label": "mapping(uint256 => struct BaalVotes.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)15372_storage": {
              "label": "struct BaalVotes.Checkpoint",
              "members": [
                {
                  "label": "fromTimePoint",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/MockBaal.sol:MockBaal": {
        "src": "contracts/fixtures/Baal/mock/MockBaal.sol:8",
        "version": {
          "withMetadata": "114cc765decb2f3e58e43d56b3b7b10e60d84d257db7e79424a0b5b089e21eb4",
          "withoutMetadata": "9095af0d1c082dc26b821cd1e052fb82dcee71574beeeec9cb49fa245055d290",
          "linkedWithoutMetadata": "9095af0d1c082dc26b821cd1e052fb82dcee71574beeeec9cb49fa245055d290"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/proxy/Clones.sol:Clones"
        ],
        "methods": [
          "(address payable,string,string)",
          "setLootPaused(bool)",
          "mintLoot(address,uint256)",
          "burnLoot(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockBaal",
            "src": "contracts/fixtures/Baal/mock/MockBaal.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "lootPaused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockBaal",
              "src": "contracts/fixtures/Baal/mock/MockBaal.sol:9"
            },
            {
              "label": "lootToken",
              "offset": 1,
              "slot": "0",
              "type": "t_contract(IBaalToken)14734",
              "contract": "MockBaal",
              "src": "contracts/fixtures/Baal/mock/MockBaal.sol:10"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IBaalToken)14734": {
              "label": "contract IBaalToken",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/TestAvatar.sol:Enum": {
        "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:4",
        "version": {
          "withMetadata": "825b1ce565617f4db0aebaf03718fced04d822f6bd17297692bc3c788648d48d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/TestAvatar.sol:TestAvatar": {
        "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:11",
        "version": {
          "withMetadata": "da7678c6599bb4258dea0a9a85163013e2101f665cf1cc73d78b51bd3034d4d3",
          "withoutMetadata": "c00f39b92aba3b316d49cc73479f96da68c49632366b08decad872de6285a3d5",
          "linkedWithoutMetadata": "c00f39b92aba3b316d49cc73479f96da68c49632366b08decad872de6285a3d5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "enableModule(address)",
          "disableModule(address,address)",
          "isModuleEnabled(address)",
          "execTransactionFromModule(address payable,uint256,bytes,uint8)",
          "execTransactionFromModuleReturnData(address payable,uint256,bytes,uint8)",
          "getModulesPaginated(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:39"
          },
          {
            "kind": "delegatecall",
            "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:50"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "module",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "TestAvatar",
              "src": "contracts/fixtures/Baal/mock/TestAvatar.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/mock/TestERC20.sol:TestERC20": {
        "src": "contracts/fixtures/Baal/mock/TestERC20.sol:5",
        "version": {
          "withMetadata": "88f05cc069ffa3d484334546a9bf7dc09985f07de7275bb9e05736bfb1c6f867",
          "withoutMetadata": "ffac6d0607e0cd61673ddcfb60ab9887dca9cbc1d3f6119aa4976028032b62e4",
          "linkedWithoutMetadata": "ffac6d0607e0cd61673ddcfb60ab9887dca9cbc1d3f6119aa4976028032b62e4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC20",
            "src": "contracts/fixtures/Baal/mock/TestERC20.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:6"
            },
            {
              "label": "symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:7"
            },
            {
              "label": "totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:9"
            },
            {
              "label": "balanceOf",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:11"
            },
            {
              "label": "allowance",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "TestERC20",
              "src": "contracts/fixtures/Baal/mock/TestERC20.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/utils/BaalVotes.sol:BaalVotes": {
        "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:17",
        "inherit": [
          "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:DelegationEIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:ERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:IERC20PermitUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:IERC20MetadataUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:IERC20Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "now()",
          "getPastVotes(address,uint256)",
          "getVotes(address)",
          "getCheckpoint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "51",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "52",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "53",
              "type": "t_uint256",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "54",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "55",
              "type": "t_string_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "56",
              "type": "t_array(t_uint256)45_storage",
              "contract": "ERC20Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "101",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "_nonces",
              "offset": 0,
              "slot": "153",
              "type": "t_mapping(t_address,t_struct(Counter)7195_storage)",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
              "offset": 0,
              "slot": "154",
              "type": "t_bytes32",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
              "renamedFrom": "_PERMIT_TYPEHASH"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "155",
              "type": "t_array(t_uint256)49_storage",
              "contract": "ERC20PermitUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
            },
            {
              "label": "_HASHED_NAME_DELEGATION",
              "offset": 0,
              "slot": "204",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION_DELEGATION",
              "offset": 0,
              "slot": "205",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "206",
              "type": "t_array(t_uint256)50_storage",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:120"
            },
            {
              "label": "checkpoints",
              "offset": 0,
              "slot": "256",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:27"
            },
            {
              "label": "numCheckpoints",
              "offset": 0,
              "slot": "257",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:28"
            },
            {
              "label": "delegates",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_address)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:29"
            },
            {
              "label": "delegationNonces",
              "offset": 0,
              "slot": "259",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BaalVotes",
              "src": "contracts/fixtures/Baal/utils/BaalVotes.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]",
              "numberOfBytes": "1440"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)15372_storage))": {
              "label": "mapping(address => mapping(uint256 => struct BaalVotes.Checkpoint))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Counter)7195_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Checkpoint)15372_storage)": {
              "label": "mapping(uint256 => struct BaalVotes.Checkpoint)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Checkpoint)15372_storage": {
              "label": "struct BaalVotes.Checkpoint",
              "members": [
                {
                  "label": "fromTimePoint",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "votes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Counter)7195_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:DelegationEIP712Upgradeable": {
        "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME_DELEGATION",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION_DELEGATION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "DelegationEIP712Upgradeable",
              "src": "contracts/fixtures/Baal/utils/DelegationEIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/fixtures/Baal/utils/Poster.sol:Poster": {
        "src": "contracts/fixtures/Baal/utils/Poster.sol:23",
        "version": {
          "withMetadata": "e816a78bf084e6a728502d82f48cbf34be147ccbb03fa6c656f5d2d41c71979a",
          "withoutMetadata": "92a678b2b2e5deb53b54652d6431c6e5b7943e820ed03e6c77a21001584ff806",
          "linkedWithoutMetadata": "92a678b2b2e5deb53b54652d6431c6e5b7943e820ed03e6c77a21001584ff806"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "post(string,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.7"
      },
      "contracts/mock/MyToken.sol:MyToken": {
        "src": "contracts/mock/MyToken.sol:7",
        "version": {
          "withMetadata": "d4c16241d2bde077bdffcec499ac86641adc21553946f2113978bb1e2191cae1",
          "withoutMetadata": "2ed3d9d0d1f191dd379ec65c2d5c2f8aa0c08bac7d519d736b0b8225f4346147",
          "linkedWithoutMetadata": "2ed3d9d0d1f191dd379ec65c2d5c2f8aa0c08bac7d519d736b0b8225f4346147"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyToken",
            "src": "contracts/mock/MyToken.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/shaman/DeVoxShaman.sol:DeVoxShamanSummonerV1": {
        "src": "contracts/shaman/DeVoxShaman.sol:229",
        "version": {
          "withMetadata": "ea51be2bcaf5f1df9b74901f1057e10c2994e05330f6d1c94018449424f47b51",
          "withoutMetadata": "46734af9cc1d90a66fa4c263fed994e7dce84fd4e36ba8789ec4fad0f4a98d6b",
          "linkedWithoutMetadata": "46734af9cc1d90a66fa4c263fed994e7dce84fd4e36ba8789ec4fad0f4a98d6b"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/proxy/Clones.sol:Clones"
        ],
        "methods": [
          "(address payable)",
          "summonDeVoxShaman(address,address payable,uint256,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DeVoxShamanSummonerV1",
            "src": "contracts/shaman/DeVoxShaman.sol:242"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "template",
              "offset": 0,
              "slot": "0",
              "type": "t_address_payable",
              "contract": "DeVoxShamanSummonerV1",
              "src": "contracts/shaman/DeVoxShaman.sol:230"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      },
      "contracts/shaman/DeVoxShaman.sol:DeVoxShamanV1": {
        "src": "contracts/shaman/DeVoxShaman.sol:13",
        "version": {
          "withMetadata": "a1ddf2632a17a90d858999a12a2cac0f1bf4513c9e58656ccef7c35f1a1740ce",
          "withoutMetadata": "f177e0859374174069cfe36db78c0706b45915e0852c7122ebe41edfce72f8bd",
          "linkedWithoutMetadata": "f177e0859374174069cfe36db78c0706b45915e0852c7122ebe41edfce72f8bd"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:UUPSUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:ERC1967UpgradeUpgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol:IERC1967Upgradeable",
          "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol:IERC1822ProxiableUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:AccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:IERC165Upgradeable",
          "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol:IAccessControlUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address payable,uint256,uint256,uint256,uint256)",
          "donate(uint256,string)",
          "getTokenBalance()",
          "setTarget(uint256)",
          "version()",
          "updateVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "1",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "1",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "2",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC165Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)4010_storage)",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "103",
              "type": "t_array(t_uint256)49_storage",
              "contract": "AccessControlUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:259"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "152",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ERC1967UpgradeUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:197"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "202",
              "type": "t_array(t_uint256)50_storage",
              "contract": "UUPSUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
            },
            {
              "label": "_version",
              "offset": 0,
              "slot": "252",
              "type": "t_uint16",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:42"
            },
            {
              "label": "baal",
              "offset": 2,
              "slot": "252",
              "type": "t_contract(IBaal)14612",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:44"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "253",
              "type": "t_contract(IERC20)10279",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:45"
            },
            {
              "label": "pricePerUnit",
              "offset": 0,
              "slot": "254",
              "type": "t_uint256",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:46"
            },
            {
              "label": "lootPerUnit",
              "offset": 0,
              "slot": "255",
              "type": "t_uint256",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:47"
            },
            {
              "label": "sharesPerMember",
              "offset": 0,
              "slot": "256",
              "type": "t_uint256",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:48"
            },
            {
              "label": "target",
              "offset": 0,
              "slot": "257",
              "type": "t_uint256",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:49"
            },
            {
              "label": "donations",
              "offset": 0,
              "slot": "258",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DeVoxShamanV1",
              "src": "contracts/shaman/DeVoxShaman.sol:53"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IBaal)14612": {
              "label": "contract IBaal",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)10279": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)4010_storage)": {
              "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)4010_storage": {
              "label": "struct AccessControlUpgradeable.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint16": {
              "label": "uint16",
              "numberOfBytes": "2"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.7"
      }
    }
  ]
}