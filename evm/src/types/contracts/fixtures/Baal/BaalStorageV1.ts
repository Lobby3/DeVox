/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace BaalTypes {
  export type ProposalStruct = {
    id: PromiseOrValue<BigNumberish>;
    prevProposalId: PromiseOrValue<BigNumberish>;
    votingStarts: PromiseOrValue<BigNumberish>;
    votingEnds: PromiseOrValue<BigNumberish>;
    graceEnds: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    baalGas: PromiseOrValue<BigNumberish>;
    yesVotes: PromiseOrValue<BigNumberish>;
    noVotes: PromiseOrValue<BigNumberish>;
    maxTotalSharesAndLootAtVote: PromiseOrValue<BigNumberish>;
    maxTotalSharesAtSponsor: PromiseOrValue<BigNumberish>;
    status: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ];
    sponsor: PromiseOrValue<string>;
    proposalDataHash: PromiseOrValue<BytesLike>;
  };

  export type ProposalStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [boolean, boolean, boolean, boolean],
    string,
    string
  ] & {
    id: number;
    prevProposalId: number;
    votingStarts: number;
    votingEnds: number;
    graceEnds: number;
    expiration: number;
    baalGas: BigNumber;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    maxTotalSharesAndLootAtVote: BigNumber;
    maxTotalSharesAtSponsor: BigNumber;
    status: [boolean, boolean, boolean, boolean];
    sponsor: string;
    proposalDataHash: string;
  };
}

export interface BaalStorageV1Interface extends utils.Interface {
  functions: {
    "getMemberVoted(address,uint32)": FunctionFragment;
    "getProposal(uint32)": FunctionFragment;
    "getVotingNonce(address)": FunctionFragment;
    "incrementVotingNonce(address)": FunctionFragment;
    "setMemberVoted(address,uint32,bool)": FunctionFragment;
    "setProposal((uint32,uint32,uint32,uint32,uint32,uint32,uint256,uint256,uint256,uint256,uint256,bool[4],address,bytes32))": FunctionFragment;
    "setVotingNonce(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMemberVoted"
      | "getProposal"
      | "getVotingNonce"
      | "incrementVotingNonce"
      | "setMemberVoted"
      | "setProposal"
      | "setVotingNonce"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMemberVoted",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementVotingNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemberVoted",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposal",
    values: [BaalTypes.ProposalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingNonce",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMemberVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementVotingNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemberVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingNonce",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BaalStorageV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaalStorageV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMemberVoted(
      member: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BaalTypes.ProposalStructOutput]>;

    getVotingNonce(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incrementVotingNonce(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMemberVoted(
      member: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      voted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposal(
      proposal: BaalTypes.ProposalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingNonce(
      member: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getMemberVoted(
    member: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getProposal(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BaalTypes.ProposalStructOutput>;

  getVotingNonce(
    member: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incrementVotingNonce(
    member: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMemberVoted(
    member: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BigNumberish>,
    voted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposal(
    proposal: BaalTypes.ProposalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingNonce(
    member: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMemberVoted(
      member: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BaalTypes.ProposalStructOutput>;

    getVotingNonce(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementVotingNonce(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMemberVoted(
      member: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      voted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposal(
      proposal: BaalTypes.ProposalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingNonce(
      member: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getMemberVoted(
      member: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingNonce(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementVotingNonce(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMemberVoted(
      member: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      voted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposal(
      proposal: BaalTypes.ProposalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingNonce(
      member: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMemberVoted(
      member: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingNonce(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementVotingNonce(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMemberVoted(
      member: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      voted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposal(
      proposal: BaalTypes.ProposalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingNonce(
      member: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
