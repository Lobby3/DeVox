/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace BaalTypes {
  export type ProposalStruct = {
    id: PromiseOrValue<BigNumberish>;
    prevProposalId: PromiseOrValue<BigNumberish>;
    votingStarts: PromiseOrValue<BigNumberish>;
    votingEnds: PromiseOrValue<BigNumberish>;
    graceEnds: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    baalGas: PromiseOrValue<BigNumberish>;
    yesVotes: PromiseOrValue<BigNumberish>;
    noVotes: PromiseOrValue<BigNumberish>;
    maxTotalSharesAndLootAtVote: PromiseOrValue<BigNumberish>;
    maxTotalSharesAtSponsor: PromiseOrValue<BigNumberish>;
    status: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ];
    sponsor: PromiseOrValue<string>;
    proposalDataHash: PromiseOrValue<BytesLike>;
  };

  export type ProposalStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [boolean, boolean, boolean, boolean],
    string,
    string
  ] & {
    id: number;
    prevProposalId: number;
    votingStarts: number;
    votingEnds: number;
    graceEnds: number;
    expiration: number;
    baalGas: BigNumber;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    maxTotalSharesAndLootAtVote: BigNumber;
    maxTotalSharesAtSponsor: BigNumber;
    status: [boolean, boolean, boolean, boolean];
    sponsor: string;
    proposalDataHash: string;
  };
}

export interface IBaalHelperInterface extends utils.Interface {
  functions: {
    "hashOperation(bytes)": FunctionFragment;
    "proposalState((uint32,uint32,uint32,uint32,uint32,uint32,uint256,uint256,uint256,uint256,uint256,bool[4],address,bytes32))": FunctionFragment;
    "ragequitTransfer(address,uint256,uint256,uint256,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hashOperation"
      | "proposalState"
      | "ragequitTransfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hashOperation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalState",
    values: [BaalTypes.ProposalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ragequitTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "hashOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ragequitTransfer",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBaalHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBaalHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hashOperation(
      _transactions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proposalState(
      proposal: BaalTypes.ProposalStruct,
      overrides?: CallOverrides
    ): Promise<[number]>;

    ragequitTransfer(
      to: PromiseOrValue<string>,
      sharesToBurn: PromiseOrValue<BigNumberish>,
      lootToBurn: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  hashOperation(
    _transactions: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  proposalState(
    proposal: BaalTypes.ProposalStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  ragequitTransfer(
    to: PromiseOrValue<string>,
    sharesToBurn: PromiseOrValue<BigNumberish>,
    lootToBurn: PromiseOrValue<BigNumberish>,
    totalSupply: PromiseOrValue<BigNumberish>,
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    hashOperation(
      _transactions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    proposalState(
      proposal: BaalTypes.ProposalStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    ragequitTransfer(
      to: PromiseOrValue<string>,
      sharesToBurn: PromiseOrValue<BigNumberish>,
      lootToBurn: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    hashOperation(
      _transactions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalState(
      proposal: BaalTypes.ProposalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ragequitTransfer(
      to: PromiseOrValue<string>,
      sharesToBurn: PromiseOrValue<BigNumberish>,
      lootToBurn: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hashOperation(
      _transactions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalState(
      proposal: BaalTypes.ProposalStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ragequitTransfer(
      to: PromiseOrValue<string>,
      sharesToBurn: PromiseOrValue<BigNumberish>,
      lootToBurn: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
