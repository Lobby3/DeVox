/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface IUserRegistryInterface extends utils.Interface {
  functions: {
    "getUser(address)": FunctionFragment;
    "removeUser(address)": FunctionFragment;
    "saveUser(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getUser" | "removeUser" | "saveUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "saveUser",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saveUser", data: BytesLike): Result;

  events: {
    "UserRemoved(address)": EventFragment;
    "UserSaved(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserSaved"): EventFragment;
}

export interface UserRemovedEventObject {
  user: string;
}
export type UserRemovedEvent = TypedEvent<[string], UserRemovedEventObject>;

export type UserRemovedEventFilter = TypedEventFilter<UserRemovedEvent>;

export interface UserSavedEventObject {
  user: string;
  metadata: string;
}
export type UserSavedEvent = TypedEvent<[string, string], UserSavedEventObject>;

export type UserSavedEventFilter = TypedEventFilter<UserSavedEvent>;

export interface IUserRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUserRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saveUser(
      user: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getUser(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeUser(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saveUser(
    user: PromiseOrValue<string>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    saveUser(
      user: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "UserRemoved(address)"(
      user?: PromiseOrValue<string> | null
    ): UserRemovedEventFilter;
    UserRemoved(user?: PromiseOrValue<string> | null): UserRemovedEventFilter;

    "UserSaved(address,bytes)"(
      user?: PromiseOrValue<string> | null,
      metadata?: null
    ): UserSavedEventFilter;
    UserSaved(
      user?: PromiseOrValue<string> | null,
      metadata?: null
    ): UserSavedEventFilter;
  };

  estimateGas: {
    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saveUser(
      user: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getUser(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saveUser(
      user: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
