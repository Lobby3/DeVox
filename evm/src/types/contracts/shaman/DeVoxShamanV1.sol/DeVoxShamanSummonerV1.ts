/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface DeVoxShamanSummonerV1Interface extends utils.Interface {
  functions: {
    "summonDeVoxShaman(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "template()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "summonDeVoxShaman" | "template"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "summonDeVoxShaman",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "template", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "summonDeVoxShaman",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "template", data: BytesLike): Result;

  events: {
    "SummonComplete(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SummonComplete"): EventFragment;
}

export interface SummonCompleteEventObject {
  baal: string;
  shaman: string;
  token: string;
  pricePerUnit: BigNumber;
  lootPerUnit: BigNumber;
  sharesPerMember: BigNumber;
  target: BigNumber;
}
export type SummonCompleteEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  SummonCompleteEventObject
>;

export type SummonCompleteEventFilter = TypedEventFilter<SummonCompleteEvent>;

export interface DeVoxShamanSummonerV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeVoxShamanSummonerV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    summonDeVoxShaman(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _pricePerUnit: PromiseOrValue<BigNumberish>,
      _lootPerUnit: PromiseOrValue<BigNumberish>,
      _sharesPerMember: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    template(overrides?: CallOverrides): Promise<[string]>;
  };

  summonDeVoxShaman(
    _moloch: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _pricePerUnit: PromiseOrValue<BigNumberish>,
    _lootPerUnit: PromiseOrValue<BigNumberish>,
    _sharesPerMember: PromiseOrValue<BigNumberish>,
    _target: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  template(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    summonDeVoxShaman(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _pricePerUnit: PromiseOrValue<BigNumberish>,
      _lootPerUnit: PromiseOrValue<BigNumberish>,
      _sharesPerMember: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    template(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SummonComplete(address,address,address,uint256,uint256,uint256,uint256)"(
      baal?: PromiseOrValue<string> | null,
      shaman?: null,
      token?: null,
      pricePerUnit?: null,
      lootPerUnit?: null,
      sharesPerMember?: null,
      target?: null
    ): SummonCompleteEventFilter;
    SummonComplete(
      baal?: PromiseOrValue<string> | null,
      shaman?: null,
      token?: null,
      pricePerUnit?: null,
      lootPerUnit?: null,
      sharesPerMember?: null,
      target?: null
    ): SummonCompleteEventFilter;
  };

  estimateGas: {
    summonDeVoxShaman(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _pricePerUnit: PromiseOrValue<BigNumberish>,
      _lootPerUnit: PromiseOrValue<BigNumberish>,
      _sharesPerMember: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    template(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    summonDeVoxShaman(
      _moloch: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _pricePerUnit: PromiseOrValue<BigNumberish>,
      _lootPerUnit: PromiseOrValue<BigNumberish>,
      _sharesPerMember: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    template(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
