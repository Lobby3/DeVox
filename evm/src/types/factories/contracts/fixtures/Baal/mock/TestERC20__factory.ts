/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../../common";
import type {
  TestERC20,
  TestERC20Interface,
} from "../../../../../contracts/fixtures/Baal/mock/TestERC20";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620010dd380380620010dd8339818101604052810190620000379190620003ad565b82600090805190602001906200004f92919062000125565b5081600190805190602001906200006892919062000125565b508060028190555080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000114919062000458565b60405180910390a3505050620004da565b8280546200013390620004a4565b90600052602060002090601f016020900481019282620001575760008555620001a3565b82601f106200017257805160ff1916838001178555620001a3565b82800160010185558215620001a3579182015b82811115620001a257825182559160200191906001019062000185565b5b509050620001b29190620001b6565b5090565b5b80821115620001d1576000816000905550600101620001b7565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200023e82620001f3565b810181811067ffffffffffffffff8211171562000260576200025f62000204565b5b80604052505050565b600062000275620001d5565b905062000283828262000233565b919050565b600067ffffffffffffffff821115620002a657620002a562000204565b5b620002b182620001f3565b9050602081019050919050565b60005b83811015620002de578082015181840152602081019050620002c1565b83811115620002ee576000848401525b50505050565b60006200030b620003058462000288565b62000269565b9050828152602081018484840111156200032a5762000329620001ee565b5b62000337848285620002be565b509392505050565b600082601f830112620003575762000356620001e9565b5b815162000369848260208601620002f4565b91505092915050565b6000819050919050565b620003878162000372565b81146200039357600080fd5b50565b600081519050620003a7816200037c565b92915050565b600080600060608486031215620003c957620003c8620001df565b5b600084015167ffffffffffffffff811115620003ea57620003e9620001e4565b5b620003f8868287016200033f565b935050602084015167ffffffffffffffff8111156200041c576200041b620001e4565b5b6200042a868287016200033f565b92505060406200043d8682870162000396565b9150509250925092565b620004528162000372565b82525050565b60006020820190506200046f600083018462000447565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004bd57607f821691505b60208210811415620004d457620004d362000475565b5b50919050565b610bf380620004ea6000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806306fdde0314610088578063095ea7b3146100a657806318160ddd146100d657806323b872dd146100f4578063313ce5671461012457806370a082311461014257806395d89b4114610172578063a9059cbb14610190578063dd62ed3e146101c0575b600080fd5b6100906101f0565b60405161009d9190610851565b60405180910390f35b6100c060048036038101906100bb919061090c565b61027e565b6040516100cd9190610967565b60405180910390f35b6100de610370565b6040516100eb9190610991565b60405180910390f35b61010e600480360381019061010991906109ac565b610376565b60405161011b9190610967565b60405180910390f35b61012c6105cb565b6040516101399190610a1b565b60405180910390f35b61015c60048036038101906101579190610a36565b6105d0565b6040516101699190610991565b60405180910390f35b61017a6105e8565b6040516101879190610851565b60405180910390f35b6101aa60048036038101906101a5919061090c565b610676565b6040516101b79190610967565b60405180910390f35b6101da60048036038101906101d59190610a63565b610793565b6040516101e79190610991565b60405180910390f35b600080546101fd90610ad2565b80601f016020809104026020016040519081016040528092919081815260200182805461022990610ad2565b80156102765780601f1061024b57610100808354040283529160200191610276565b820191906000526020600020905b81548152906001019060200180831161025957829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161035e9190610991565b60405180910390a36001905092915050565b60025481565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146104af5781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104a79190610b33565b925050819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104fe9190610b33565b9250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105549190610b67565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516105b89190610991565b60405180910390a3600190509392505050565b601281565b60036020528060005260406000206000915090505481565b600180546105f590610ad2565b80601f016020809104026020016040519081016040528092919081815260200182805461062190610ad2565b801561066e5780601f106106435761010080835404028352916020019161066e565b820191906000526020600020905b81548152906001019060200180831161065157829003601f168201915b505050505081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106c79190610b33565b9250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461071d9190610b67565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107819190610991565b60405180910390a36001905092915050565b6004602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b838110156107f25780820151818401526020810190506107d7565b83811115610801576000848401525b50505050565b6000601f19601f8301169050919050565b6000610823826107b8565b61082d81856107c3565b935061083d8185602086016107d4565b61084681610807565b840191505092915050565b6000602082019050818103600083015261086b8184610818565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108a382610878565b9050919050565b6108b381610898565b81146108be57600080fd5b50565b6000813590506108d0816108aa565b92915050565b6000819050919050565b6108e9816108d6565b81146108f457600080fd5b50565b600081359050610906816108e0565b92915050565b6000806040838503121561092357610922610873565b5b6000610931858286016108c1565b9250506020610942858286016108f7565b9150509250929050565b60008115159050919050565b6109618161094c565b82525050565b600060208201905061097c6000830184610958565b92915050565b61098b816108d6565b82525050565b60006020820190506109a66000830184610982565b92915050565b6000806000606084860312156109c5576109c4610873565b5b60006109d3868287016108c1565b93505060206109e4868287016108c1565b92505060406109f5868287016108f7565b9150509250925092565b600060ff82169050919050565b610a15816109ff565b82525050565b6000602082019050610a306000830184610a0c565b92915050565b600060208284031215610a4c57610a4b610873565b5b6000610a5a848285016108c1565b91505092915050565b60008060408385031215610a7a57610a79610873565b5b6000610a88858286016108c1565b9250506020610a99858286016108c1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610aea57607f821691505b60208210811415610afe57610afd610aa3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b3e826108d6565b9150610b49836108d6565b925082821015610b5c57610b5b610b04565b5b828203905092915050565b6000610b72826108d6565b9150610b7d836108d6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bb257610bb1610b04565b5b82820190509291505056fea2646970667358221220c2c9008d7a6450fc8099788433156996f1dde4e329b6e82ca6c418b7983c1b6f64736f6c634300080c0033";

type TestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20__factory extends ContractFactory {
  constructor(...args: TestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC20> {
    return super.deploy(
      _name,
      _symbol,
      _totalSupply,
      overrides || {}
    ) as Promise<TestERC20>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _totalSupply,
      overrides || {}
    );
  }
  override attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  override connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
