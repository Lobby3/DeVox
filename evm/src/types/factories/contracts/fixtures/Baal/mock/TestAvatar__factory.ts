/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../../common";
import type {
  TestAvatar,
  TestAvatarInterface,
} from "../../../../../contracts/fixtures/Baal/mock/TestAvatar";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "disableModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_module",
        type: "address",
      },
    ],
    name: "enableModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "operation",
        type: "uint8",
      },
    ],
    name: "execTransactionFromModule",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "operation",
        type: "uint8",
      },
    ],
    name: "execTransactionFromModuleReturnData",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "returnData",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pageSize",
        type: "uint256",
      },
    ],
    name: "getModulesPaginated",
    outputs: [
      {
        internalType: "address[]",
        name: "array",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "next",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_module",
        type: "address",
      },
    ],
    name: "isModuleEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "module",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d26806100206000396000f3fe6080604052600436106100645760003560e01c80632d9ad53d14610070578063468721a7146100ad5780635229073f146100ea578063610b592514610128578063b86d529814610151578063cc2f84521461017c578063e009cfde146101ba5761006b565b3661006b57005b600080fd5b34801561007c57600080fd5b506100976004803603810190610092919061075f565b6101e3565b6040516100a491906107a7565b60405180910390f35b3480156100b957600080fd5b506100d460048036038101906100cf91906108d4565b61024c565b6040516100e191906107a7565b60405180910390f35b3480156100f657600080fd5b50610111600480360381019061010c91906108d4565b6103d5565b60405161011f9291906109f5565b60405180910390f35b34801561013457600080fd5b5061014f600480360381019061014a919061075f565b610563565b005b34801561015d57600080fd5b506101666105a6565b6040516101739190610a34565b60405180910390f35b34801561018857600080fd5b506101a3600480360381019061019e9190610a4f565b6105ca565b6040516101b1929190610b4d565b60405180910390f35b3480156101c657600080fd5b506101e160048036038101906101dc9190610b7d565b6106b2565b005b60008173ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156102425760019050610247565b600090505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d490610c1a565b60405180910390fd5b60018260ff16141561035b578573ffffffffffffffffffffffffffffffffffffffff168484604051610310929190610c79565b600060405180830381855af49150503d806000811461034b576040519150601f19603f3d011682016040523d82523d6000602084013e610350565b606091505b5050809150506103cc565b8573ffffffffffffffffffffffffffffffffffffffff16858585604051610383929190610c79565b60006040518083038185875af1925050503d80600081146103c0576040519150601f19603f3d011682016040523d82523d6000602084013e6103c5565b606091505b5050809150505b95945050505050565b6000606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045e90610c1a565b60405180910390fd5b60018360ff1614156104e5578673ffffffffffffffffffffffffffffffffffffffff16858560405161049a929190610c79565b600060405180830381855af49150503d80600081146104d5576040519150601f19603f3d011682016040523d82523d6000602084013e6104da565b606091505b505080925050610559565b8673ffffffffffffffffffffffffffffffffffffffff1686868660405161050d929190610c79565b60006040518083038185875af1925050503d806000811461054a576040519150601f19603f3d011682016040523d82523d6000602084013e61054f565b606091505b5080925081935050505b9550959350505050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008267ffffffffffffffff8111156105e8576105e7610c92565b5b6040519080825280602002602001820160405280156106165781602001602082028036833780820191505090505b50915060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260008151811061064e5761064d610cc1565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509250929050565b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061072c82610701565b9050919050565b61073c81610721565b811461074757600080fd5b50565b60008135905061075981610733565b92915050565b600060208284031215610775576107746106f7565b5b60006107838482850161074a565b91505092915050565b60008115159050919050565b6107a18161078c565b82525050565b60006020820190506107bc6000830184610798565b92915050565b60006107cd82610701565b9050919050565b6107dd816107c2565b81146107e857600080fd5b50565b6000813590506107fa816107d4565b92915050565b6000819050919050565b61081381610800565b811461081e57600080fd5b50565b6000813590506108308161080a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261085b5761085a610836565b5b8235905067ffffffffffffffff8111156108785761087761083b565b5b60208301915083600182028301111561089457610893610840565b5b9250929050565b600060ff82169050919050565b6108b18161089b565b81146108bc57600080fd5b50565b6000813590506108ce816108a8565b92915050565b6000806000806000608086880312156108f0576108ef6106f7565b5b60006108fe888289016107eb565b955050602061090f88828901610821565b945050604086013567ffffffffffffffff8111156109305761092f6106fc565b5b61093c88828901610845565b9350935050606061094f888289016108bf565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b60005b8381101561099657808201518184015260208101905061097b565b838111156109a5576000848401525b50505050565b6000601f19601f8301169050919050565b60006109c78261095c565b6109d18185610967565b93506109e1818560208601610978565b6109ea816109ab565b840191505092915050565b6000604082019050610a0a6000830185610798565b8181036020830152610a1c81846109bc565b90509392505050565b610a2e81610721565b82525050565b6000602082019050610a496000830184610a25565b92915050565b60008060408385031215610a6657610a656106f7565b5b6000610a748582860161074a565b9250506020610a8585828601610821565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610ac481610721565b82525050565b6000610ad68383610abb565b60208301905092915050565b6000602082019050919050565b6000610afa82610a8f565b610b048185610a9a565b9350610b0f83610aab565b8060005b83811015610b40578151610b278882610aca565b9750610b3283610ae2565b925050600181019050610b13565b5085935050505092915050565b60006040820190508181036000830152610b678185610aef565b9050610b766020830184610a25565b9392505050565b60008060408385031215610b9457610b936106f7565b5b6000610ba28582860161074a565b9250506020610bb38582860161074a565b9150509250929050565b600082825260208201905092915050565b7f4e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b6000610c04600e83610bbd565b9150610c0f82610bce565b602082019050919050565b60006020820190508181036000830152610c3381610bf7565b9050919050565b600081905092915050565b82818337600083830152505050565b6000610c608385610c3a565b9350610c6d838584610c45565b82840190509392505050565b6000610c86828486610c54565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220a1923791d35364ad4eec61c7bccdf20aefaf8662e3117727db8af8d67527141e64736f6c634300080c0033";

type TestAvatarConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAvatarConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAvatar__factory extends ContractFactory {
  constructor(...args: TestAvatarConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestAvatar> {
    return super.deploy(overrides || {}) as Promise<TestAvatar>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestAvatar {
    return super.attach(address) as TestAvatar;
  }
  override connect(signer: Signer): TestAvatar__factory {
    return super.connect(signer) as TestAvatar__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAvatarInterface {
    return new utils.Interface(_abi) as TestAvatarInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAvatar {
    return new Contract(address, _abi, signerOrProvider) as TestAvatar;
  }
}
