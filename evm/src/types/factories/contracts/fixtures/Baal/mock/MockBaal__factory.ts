/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../../common";
import type {
  MockBaal,
  MockBaalInterface,
} from "../../../../../contracts/fixtures/Baal/mock/MockBaal";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_lootSingleton",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burnLoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lootPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lootToken",
    outputs: [
      {
        internalType: "contract IBaalToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintLoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "paused",
        type: "bool",
      },
    ],
    name: "setLootPaused",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108a73803806108a783398101604081905261002f9161027e565b6100428361010c60201b61038e1760201c565b60008054610100600160a81b0319166101006001600160a01b039384168102919091179182905560405191049091169063562d190d90610086908590602001610300565b604051602081830303815290604052836040516020016100a69190610329565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016100d292919061037e565b600060405180830381600087803b1580156100ec57600080fd5b505af1158015610100573d6000803e3d6000fd5b505050505050506103ac565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166101ac5760405162461bcd60e51b815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101e25781810151838201526020016101ca565b838111156101f1576000848401525b50505050565b600082601f83011261020857600080fd5b81516001600160401b0380821115610222576102226101b1565b604051601f8301601f19908116603f0116810190828211818310171561024a5761024a6101b1565b8160405283815286602085880101111561026357600080fd5b6102748460208301602089016101c7565b9695505050505050565b60008060006060848603121561029357600080fd5b83516001600160a01b03811681146102aa57600080fd5b60208501519093506001600160401b03808211156102c757600080fd5b6102d3878388016101f7565b935060408601519150808211156102e957600080fd5b506102f6868287016101f7565b9150509250925092565b600082516103128184602087016101c7565b64081313d3d560da1b920191825250600501919050565b6000825161033b8184602087016101c7565b640b5313d3d560da1b920191825250600501919050565b6000815180845261036a8160208601602086016101c7565b601f01601f19169290920160200192915050565b6040815260006103916040830185610352565b82810360208401526103a38185610352565b95945050505050565b6104ec806103bb6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630ac419b21461005c5780632cdc48fc1461007e57806359cb2f06146100935780639bceb7f1146100a6578063f460124d146100b9575b600080fd5b6000546100699060ff1681565b60405190151581526020015b60405180910390f35b61009161008c36600461043d565b6100e9565b005b6100916100a1366004610461565b6102de565b6100916100b4366004610461565b61034f565b6000546100d19061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610075565b600060019054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561013c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101609190610499565b15801561016a5750805b156101dc57600060019054906101000a90046001600160a01b03166001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101bf57600080fd5b505af11580156101d3573d6000803e3d6000fd5b505050506102cb565b600060019054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561022f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102539190610499565b801561025d575080155b156102cb57600060019054906101000a90046001600160a01b03166001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156102b257600080fd5b505af11580156102c6573d6000803e3d6000fd5b505050505b6000805460ff1916911515919091179055565b6000546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052610100909204909116906340c10f19906044015b600060405180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b505050505050565b600054604051632770a7eb60e21b81526001600160a01b0384811660048301526024820184905261010090920490911690639dc29fac90604401610319565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166104275760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b801515811461043a57600080fd5b50565b60006020828403121561044f57600080fd5b813561045a8161042c565b9392505050565b6000806040838503121561047457600080fd5b82356001600160a01b038116811461048b57600080fd5b946020939093013593505050565b6000602082840312156104ab57600080fd5b815161045a8161042c56fea2646970667358221220c061026e57dc35df9790458e1a00d9473a248ed72a9095f1742b29b16eb5c7d664736f6c634300080c0033";

type MockBaalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBaalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBaal__factory extends ContractFactory {
  constructor(...args: MockBaalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lootSingleton: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockBaal> {
    return super.deploy(
      _lootSingleton,
      _name,
      _symbol,
      overrides || {}
    ) as Promise<MockBaal>;
  }
  override getDeployTransaction(
    _lootSingleton: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lootSingleton,
      _name,
      _symbol,
      overrides || {}
    );
  }
  override attach(address: string): MockBaal {
    return super.attach(address) as MockBaal;
  }
  override connect(signer: Signer): MockBaal__factory {
    return super.connect(signer) as MockBaal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBaalInterface {
    return new utils.Interface(_abi) as MockBaalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBaal {
    return new Contract(address, _abi, signerOrProvider) as MockBaal;
  }
}
