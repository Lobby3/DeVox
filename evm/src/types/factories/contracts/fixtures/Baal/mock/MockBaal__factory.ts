/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../../common";
import type {
  MockBaal,
  MockBaalInterface,
} from "../../../../../contracts/fixtures/Baal/mock/MockBaal";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_lootSingleton",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burnLoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lootPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lootToken",
    outputs: [
      {
        internalType: "contract IBaalToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintLoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "paused",
        type: "bool",
      },
    ],
    name: "setLootPaused",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f9638038062000f9683398181016040528101906200003791906200042b565b6200004d836200016b60201b620004b01760201c565b600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663562d190d83604051602001620000de919062000562565b60405160208183030381529060405283604051602001620001009190620005d8565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016200012e92919062000650565b600060405180830381600087803b1580156200014957600080fd5b505af11580156200015e573d6000803e3d6000fd5b50505050505050620006fd565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000224576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021b90620006db565b60405180910390fd5b919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026a826200023d565b9050919050565b6200027c816200025d565b81146200028857600080fd5b50565b6000815190506200029c8162000271565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002f782620002ac565b810181811067ffffffffffffffff82111715620003195762000318620002bd565b5b80604052505050565b60006200032e62000229565b90506200033c8282620002ec565b919050565b600067ffffffffffffffff8211156200035f576200035e620002bd565b5b6200036a82620002ac565b9050602081019050919050565b60005b83811015620003975780820151818401526020810190506200037a565b83811115620003a7576000848401525b50505050565b6000620003c4620003be8462000341565b62000322565b905082815260208101848484011115620003e357620003e2620002a7565b5b620003f084828562000377565b509392505050565b600082601f83011262000410576200040f620002a2565b5b815162000422848260208601620003ad565b91505092915050565b60008060006060848603121562000447576200044662000233565b5b600062000457868287016200028b565b935050602084015167ffffffffffffffff8111156200047b576200047a62000238565b5b6200048986828701620003f8565b925050604084015167ffffffffffffffff811115620004ad57620004ac62000238565b5b620004bb86828701620003f8565b9150509250925092565b600081519050919050565b600081905092915050565b6000620004e882620004c5565b620004f48185620004d0565b93506200050681856020860162000377565b80840191505092915050565b7f204c4f4f54000000000000000000000000000000000000000000000000000000600082015250565b60006200054a600583620004d0565b9150620005578262000512565b600582019050919050565b6000620005708284620004db565b91506200057d826200053b565b915081905092915050565b7f2d4c4f4f54000000000000000000000000000000000000000000000000000000600082015250565b6000620005c0600583620004d0565b9150620005cd8262000588565b600582019050919050565b6000620005e68284620004db565b9150620005f382620005b1565b915081905092915050565b600082825260208201905092915050565b60006200061c82620004c5565b620006288185620005fe565b93506200063a81856020860162000377565b6200064581620002ac565b840191505092915050565b600060408201905081810360008301526200066c81856200060f565b905081810360208301526200068281846200060f565b90509392505050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b6000620006c3601683620005fe565b9150620006d0826200068b565b602082019050919050565b60006020820190508181036000830152620006f681620006b4565b9050919050565b610889806200070d6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630ac419b21461005c5780632cdc48fc1461007a57806359cb2f06146100965780639bceb7f1146100b2578063f460124d146100ce575b600080fd5b6100646100ec565b6040516100719190610586565b60405180910390f35b610094600480360381019061008f91906105d2565b6100fd565b005b6100b060048036038101906100ab9190610693565b610364565b005b6100cc60048036038101906100c79190610693565b6103f7565b005b6100d661048a565b6040516100e39190610732565b60405180910390f35b60008054906101000a900460ff1681565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018e9190610762565b1580156101985750805b1561022457600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561020757600080fd5b505af115801561021b573d6000803e3d6000fd5b50505050610348565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190610762565b80156102bf575080155b1561034757600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561032e57600080fd5b505af1158015610342573d6000803e3d6000fd5b505050505b5b806000806101000a81548160ff02191690831515021790555050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b81526004016103c19291906107ad565b600060405180830381600087803b1580156103db57600080fd5b505af11580156103ef573d6000803e3d6000fd5b505050505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac83836040518363ffffffff1660e01b81526004016104549291906107ad565b600060405180830381600087803b15801561046e57600080fd5b505af1158015610482573d6000803e3d6000fd5b505050505050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90610833565b60405180910390fd5b919050565b60008115159050919050565b6105808161056b565b82525050565b600060208201905061059b6000830184610577565b92915050565b600080fd5b6105af8161056b565b81146105ba57600080fd5b50565b6000813590506105cc816105a6565b92915050565b6000602082840312156105e8576105e76105a1565b5b60006105f6848285016105bd565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061062a826105ff565b9050919050565b61063a8161061f565b811461064557600080fd5b50565b60008135905061065781610631565b92915050565b6000819050919050565b6106708161065d565b811461067b57600080fd5b50565b60008135905061068d81610667565b92915050565b600080604083850312156106aa576106a96105a1565b5b60006106b885828601610648565b92505060206106c98582860161067e565b9150509250929050565b6000819050919050565b60006106f86106f36106ee846105ff565b6106d3565b6105ff565b9050919050565b600061070a826106dd565b9050919050565b600061071c826106ff565b9050919050565b61072c81610711565b82525050565b60006020820190506107476000830184610723565b92915050565b60008151905061075c816105a6565b92915050565b600060208284031215610778576107776105a1565b5b60006107868482850161074d565b91505092915050565b6107988161061f565b82525050565b6107a78161065d565b82525050565b60006040820190506107c2600083018561078f565b6107cf602083018461079e565b9392505050565b600082825260208201905092915050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b600061081d6016836107d6565b9150610828826107e7565b602082019050919050565b6000602082019050818103600083015261084c81610810565b905091905056fea26469706673582212204f34dd6eac6ec47ae4ff3a5b9026fb3acdfce085e8a8ef25cfe997433ab1c77f64736f6c634300080c0033";

type MockBaalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBaalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBaal__factory extends ContractFactory {
  constructor(...args: MockBaalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lootSingleton: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockBaal> {
    return super.deploy(
      _lootSingleton,
      _name,
      _symbol,
      overrides || {}
    ) as Promise<MockBaal>;
  }
  override getDeployTransaction(
    _lootSingleton: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lootSingleton,
      _name,
      _symbol,
      overrides || {}
    );
  }
  override attach(address: string): MockBaal {
    return super.attach(address) as MockBaal;
  }
  override connect(signer: Signer): MockBaal__factory {
    return super.connect(signer) as MockBaal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBaalInterface {
    return new utils.Interface(_abi) as MockBaalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBaal {
    return new Contract(address, _abi, signerOrProvider) as MockBaal;
  }
}
