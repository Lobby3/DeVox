/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../../common";
import type {
  Poster,
  PosterInterface,
} from "../../../../../contracts/fixtures/Baal/utils/Poster";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "content",
        type: "string",
      },
      {
        indexed: true,
        internalType: "string",
        name: "tag",
        type: "string",
      },
    ],
    name: "NewPost",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "content",
        type: "string",
      },
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
    ],
    name: "post",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102ab806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630ae1b13d14610030575b600080fd5b61004a60048036038101906100459190610129565b61004c565b005b818160405161005c9291906101e9565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f6c7f3182d7e4cb876251f9ae1489975fdbbf15d9f35d393f2ac9b1ff57cec69f86866040516100ac929190610251565b60405180910390a350505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126100e9576100e86100c4565b5b8235905067ffffffffffffffff811115610106576101056100c9565b5b602083019150836001820283011115610122576101216100ce565b5b9250929050565b60008060008060408587031215610143576101426100ba565b5b600085013567ffffffffffffffff811115610161576101606100bf565b5b61016d878288016100d3565b9450945050602085013567ffffffffffffffff8111156101905761018f6100bf565b5b61019c878288016100d3565b925092505092959194509250565b600081905092915050565b82818337600083830152505050565b60006101d083856101aa565b93506101dd8385846101b5565b82840190509392505050565b60006101f68284866101c4565b91508190509392505050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b60006102308385610202565b935061023d8385846101b5565b61024683610213565b840190509392505050565b6000602082019050818103600083015261026c818486610224565b9050939250505056fea264697066735822122078ae7ffadc293e8613edf0ca1c91e6b7bf109757d696b684936ce1950b1f672b64736f6c634300080c0033";

type PosterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PosterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Poster__factory extends ContractFactory {
  constructor(...args: PosterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Poster> {
    return super.deploy(overrides || {}) as Promise<Poster>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Poster {
    return super.attach(address) as Poster;
  }
  override connect(signer: Signer): Poster__factory {
    return super.connect(signer) as Poster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PosterInterface {
    return new utils.Interface(_abi) as PosterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Poster {
    return new Contract(address, _abi, signerOrProvider) as Poster;
  }
}
