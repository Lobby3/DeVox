/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ModuleManager,
  ModuleManagerInterface,
} from "../../../../../@gnosis.pm/safe-contracts/contracts/base/ModuleManager";
import type { PromiseOrValue } from "../../../../../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "DisabledModule",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "EnabledModule",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "ExecutionFromModuleFailure",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "ExecutionFromModuleSuccess",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevModule",
        type: "address",
      },
      {
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "disableModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "enableModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "enum Enum.Operation",
        name: "operation",
        type: "uint8",
      },
    ],
    name: "execTransactionFromModule",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "enum Enum.Operation",
        name: "operation",
        type: "uint8",
      },
    ],
    name: "execTransactionFromModuleReturnData",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "returnData",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "start",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pageSize",
        type: "uint256",
      },
    ],
    name: "getModulesPaginated",
    outputs: [
      {
        internalType: "address[]",
        name: "array",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "next",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "isModuleEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611588806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632d9ad53d14610067578063468721a7146100975780635229073f146100c7578063610b5925146100f8578063cc2f845214610114578063e009cfde14610145575b600080fd5b610081600480360381019061007c9190610d78565b610161565b60405161008e9190610dc0565b60405180910390f35b6100b160048036038101906100ac9190610f7c565b610232565b6040516100be9190610dc0565b60405180910390f35b6100e160048036038101906100dc9190610f7c565b6103e4565b6040516100ef929190611087565b60405180910390f35b610112600480360381019061010d9190610d78565b61041a565b005b61012e600480360381019061012991906110b7565b61072c565b60405161013c9291906111c4565b60405180910390f35b61015f600480360381019061015a91906111f4565b61092b565b005b60008173ffffffffffffffffffffffffffffffffffffffff16600173ffffffffffffffffffffffffffffffffffffffff161415801561022b5750600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b6000600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156102fc5750600073ffffffffffffffffffffffffffffffffffffffff166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b61033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033290611291565b60405180910390fd5b610348858585855a610c3c565b90508015610398573373ffffffffffffffffffffffffffffffffffffffff167f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb860405160405180910390a26103dc565b3373ffffffffffffffffffffffffffffffffffffffff167facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd37560405160405180910390a25b949350505050565b600060606103f486868686610232565b915060405160203d0181016040523d81523d6000602083013e8091505094509492505050565b610422610c96565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561048c5750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b6104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c2906112fd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058f90611369565b60405180910390fd5b600080600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600080600173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f8440816040516107219190611389565b60405180910390a150565b606060008267ffffffffffffffff81111561074a57610749610e2c565b5b6040519080825280602002602001820160405280156107785781602001602082028036833780820191505090505b5091506000808060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561084a5750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561085557508482105b1561091c578084838151811061086e5761086d6113a4565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050818061091490611402565b9250506107e0565b80925081845250509250929050565b610933610c96565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561099d5750600173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b6109dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d3906112fd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90611497565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace405427681604051610c309190611389565b60405180910390a15050565b6000600180811115610c5157610c506114b7565b5b836001811115610c6457610c636114b7565b5b1415610c7d576000808551602087018986f49050610c8d565b600080855160208701888a87f190505b95945050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfb90611532565b60405180910390fd5b565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d4582610d1a565b9050919050565b610d5581610d3a565b8114610d6057600080fd5b50565b600081359050610d7281610d4c565b92915050565b600060208284031215610d8e57610d8d610d10565b5b6000610d9c84828501610d63565b91505092915050565b60008115159050919050565b610dba81610da5565b82525050565b6000602082019050610dd56000830184610db1565b92915050565b6000819050919050565b610dee81610ddb565b8114610df957600080fd5b50565b600081359050610e0b81610de5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e6482610e1b565b810181811067ffffffffffffffff82111715610e8357610e82610e2c565b5b80604052505050565b6000610e96610d06565b9050610ea28282610e5b565b919050565b600067ffffffffffffffff821115610ec257610ec1610e2c565b5b610ecb82610e1b565b9050602081019050919050565b82818337600083830152505050565b6000610efa610ef584610ea7565b610e8c565b905082815260208101848484011115610f1657610f15610e16565b5b610f21848285610ed8565b509392505050565b600082601f830112610f3e57610f3d610e11565b5b8135610f4e848260208601610ee7565b91505092915050565b60028110610f6457600080fd5b50565b600081359050610f7681610f57565b92915050565b60008060008060808587031215610f9657610f95610d10565b5b6000610fa487828801610d63565b9450506020610fb587828801610dfc565b935050604085013567ffffffffffffffff811115610fd657610fd5610d15565b5b610fe287828801610f29565b9250506060610ff387828801610f67565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b8381101561103957808201518184015260208101905061101e565b83811115611048576000848401525b50505050565b600061105982610fff565b611063818561100a565b935061107381856020860161101b565b61107c81610e1b565b840191505092915050565b600060408201905061109c6000830185610db1565b81810360208301526110ae818461104e565b90509392505050565b600080604083850312156110ce576110cd610d10565b5b60006110dc85828601610d63565b92505060206110ed85828601610dfc565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61112c81610d3a565b82525050565b600061113e8383611123565b60208301905092915050565b6000602082019050919050565b6000611162826110f7565b61116c8185611102565b935061117783611113565b8060005b838110156111a857815161118f8882611132565b975061119a8361114a565b92505060018101905061117b565b5085935050505092915050565b6111be81610d3a565b82525050565b600060408201905081810360008301526111de8185611157565b90506111ed60208301846111b5565b9392505050565b6000806040838503121561120b5761120a610d10565b5b600061121985828601610d63565b925050602061122a85828601610d63565b9150509250929050565b600082825260208201905092915050565b7f4753313034000000000000000000000000000000000000000000000000000000600082015250565b600061127b600583611234565b915061128682611245565b602082019050919050565b600060208201905081810360008301526112aa8161126e565b9050919050565b7f4753313031000000000000000000000000000000000000000000000000000000600082015250565b60006112e7600583611234565b91506112f2826112b1565b602082019050919050565b60006020820190508181036000830152611316816112da565b9050919050565b7f4753313032000000000000000000000000000000000000000000000000000000600082015250565b6000611353600583611234565b915061135e8261131d565b602082019050919050565b6000602082019050818103600083015261138281611346565b9050919050565b600060208201905061139e60008301846111b5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061140d82610ddb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114405761143f6113d3565b5b600182019050919050565b7f4753313033000000000000000000000000000000000000000000000000000000600082015250565b6000611481600583611234565b915061148c8261144b565b602082019050919050565b600060208201905081810360008301526114b081611474565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4753303331000000000000000000000000000000000000000000000000000000600082015250565b600061151c600583611234565b9150611527826114e6565b602082019050919050565b6000602082019050818103600083015261154b8161150f565b905091905056fea2646970667358221220d6257d831c4e5265711653e634d3db9a91352007a018ca5fb27f8bd0caa8b9f364736f6c634300080c0033";

type ModuleManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ModuleManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ModuleManager__factory extends ContractFactory {
  constructor(...args: ModuleManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ModuleManager> {
    return super.deploy(overrides || {}) as Promise<ModuleManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ModuleManager {
    return super.attach(address) as ModuleManager;
  }
  override connect(signer: Signer): ModuleManager__factory {
    return super.connect(signer) as ModuleManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ModuleManagerInterface {
    return new utils.Interface(_abi) as ModuleManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ModuleManager {
    return new Contract(address, _abi, signerOrProvider) as ModuleManager;
  }
}
