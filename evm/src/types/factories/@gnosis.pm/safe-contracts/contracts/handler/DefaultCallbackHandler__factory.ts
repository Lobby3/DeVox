/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  DefaultCallbackHandler,
  DefaultCallbackHandlerInterface,
} from "../../../../../@gnosis.pm/safe-contracts/contracts/handler/DefaultCallbackHandler";
import type { PromiseOrValue } from "../../../../../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "tokensReceived",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061097e806100206000396000f3fe608060405234801561001057600080fd5b506004361061006c5760003560e01c806223de291461007157806301ffc9a71461008d578063150b7a02146100bd578063a3f4df7e146100ed578063bc197c811461010b578063f23a6e611461013b578063ffa1ad741461016b575b600080fd5b61008b60048036038101906100869190610485565b610189565b005b6100a760048036038101906100a291906105ac565b610193565b6040516100b491906105f4565b60405180910390f35b6100d760048036038101906100d2919061060f565b6102cd565b6040516100e491906106a6565b60405180910390f35b6100f56102e2565b604051610102919061075a565b60405180910390f35b610125600480360381019061012091906107d2565b61031b565b60405161013291906106a6565b60405180910390f35b610155600480360381019061015091906108ae565b610333565b60405161016291906106a6565b60405180910390f35b610173610349565b604051610180919061075a565b60405180910390f35b5050505050505050565b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061025e57507f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806102c657507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600063150b7a0260e01b905095945050505050565b6040518060400160405280601881526020017f44656661756c742043616c6c6261636b2048616e646c6572000000000000000081525081565b600063bc197c8160e01b905098975050505050505050565b600063f23a6e6160e01b90509695505050505050565b6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103b78261038c565b9050919050565b6103c7816103ac565b81146103d257600080fd5b50565b6000813590506103e4816103be565b92915050565b6000819050919050565b6103fd816103ea565b811461040857600080fd5b50565b60008135905061041a816103f4565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261044557610444610420565b5b8235905067ffffffffffffffff81111561046257610461610425565b5b60208301915083600182028301111561047e5761047d61042a565b5b9250929050565b60008060008060008060008060c0898b0312156104a5576104a4610382565b5b60006104b38b828c016103d5565b98505060206104c48b828c016103d5565b97505060406104d58b828c016103d5565b96505060606104e68b828c0161040b565b955050608089013567ffffffffffffffff81111561050757610506610387565b5b6105138b828c0161042f565b945094505060a089013567ffffffffffffffff81111561053657610535610387565b5b6105428b828c0161042f565b92509250509295985092959890939650565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61058981610554565b811461059457600080fd5b50565b6000813590506105a681610580565b92915050565b6000602082840312156105c2576105c1610382565b5b60006105d084828501610597565b91505092915050565b60008115159050919050565b6105ee816105d9565b82525050565b600060208201905061060960008301846105e5565b92915050565b60008060008060006080868803121561062b5761062a610382565b5b6000610639888289016103d5565b955050602061064a888289016103d5565b945050604061065b8882890161040b565b935050606086013567ffffffffffffffff81111561067c5761067b610387565b5b6106888882890161042f565b92509250509295509295909350565b6106a081610554565b82525050565b60006020820190506106bb6000830184610697565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106fb5780820151818401526020810190506106e0565b8381111561070a576000848401525b50505050565b6000601f19601f8301169050919050565b600061072c826106c1565b61073681856106cc565b93506107468185602086016106dd565b61074f81610710565b840191505092915050565b600060208201905081810360008301526107748184610721565b905092915050565b60008083601f84011261079257610791610420565b5b8235905067ffffffffffffffff8111156107af576107ae610425565b5b6020830191508360208202830111156107cb576107ca61042a565b5b9250929050565b60008060008060008060008060a0898b0312156107f2576107f1610382565b5b60006108008b828c016103d5565b98505060206108118b828c016103d5565b975050604089013567ffffffffffffffff81111561083257610831610387565b5b61083e8b828c0161077c565b9650965050606089013567ffffffffffffffff81111561086157610860610387565b5b61086d8b828c0161077c565b9450945050608089013567ffffffffffffffff8111156108905761088f610387565b5b61089c8b828c0161042f565b92509250509295985092959890939650565b60008060008060008060a087890312156108cb576108ca610382565b5b60006108d989828a016103d5565b96505060206108ea89828a016103d5565b95505060406108fb89828a0161040b565b945050606061090c89828a0161040b565b935050608087013567ffffffffffffffff81111561092d5761092c610387565b5b61093989828a0161042f565b9250925050929550929550929556fea26469706673582212203aec0f11997e211481a36622e890480e645313ea04a53919250415d8645b9f6c64736f6c634300080c0033";

type DefaultCallbackHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DefaultCallbackHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DefaultCallbackHandler__factory extends ContractFactory {
  constructor(...args: DefaultCallbackHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DefaultCallbackHandler> {
    return super.deploy(overrides || {}) as Promise<DefaultCallbackHandler>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DefaultCallbackHandler {
    return super.attach(address) as DefaultCallbackHandler;
  }
  override connect(signer: Signer): DefaultCallbackHandler__factory {
    return super.connect(signer) as DefaultCallbackHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DefaultCallbackHandlerInterface {
    return new utils.Interface(_abi) as DefaultCallbackHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DefaultCallbackHandler {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DefaultCallbackHandler;
  }
}
