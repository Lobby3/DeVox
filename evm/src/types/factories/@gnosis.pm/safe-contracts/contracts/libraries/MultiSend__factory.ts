/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  MultiSend,
  MultiSendInterface,
} from "../../../../../@gnosis.pm/safe-contracts/contracts/libraries/MultiSend";
import type { PromiseOrValue } from "../../../../../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "transactions",
        type: "bytes",
      },
    ],
    name: "multiSend",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506080516103d661005f6000396000604101526103d66000f3fe60806040526004361061001e5760003560e01c80638d80ff0a14610023575b600080fd5b61003d600480360381019061003891906102b4565b61003f565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156100ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c590610380565b60405180910390fd5b805160205b81811015610155578083015160f81c6001820184015160601c601583018501516035840186015160558501870160008560008114610118576001811461012857610133565b6000808585888a5af19150610133565b6000808585895af491505b50600081141561014257600080fd5b82605501870196505050505050506100d3565b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101c182610178565b810181811067ffffffffffffffff821117156101e0576101df610189565b5b80604052505050565b60006101f361015a565b90506101ff82826101b8565b919050565b600067ffffffffffffffff82111561021f5761021e610189565b5b61022882610178565b9050602081019050919050565b82818337600083830152505050565b600061025761025284610204565b6101e9565b90508281526020810184848401111561027357610272610173565b5b61027e848285610235565b509392505050565b600082601f83011261029b5761029a61016e565b5b81356102ab848260208601610244565b91505092915050565b6000602082840312156102ca576102c9610164565b5b600082013567ffffffffffffffff8111156102e8576102e7610169565b5b6102f484828501610286565b91505092915050565b600082825260208201905092915050565b7f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060008201527f7669612064656c656761746563616c6c00000000000000000000000000000000602082015250565b600061036a6030836102fd565b91506103758261030e565b604082019050919050565b600060208201905081810360008301526103998161035d565b905091905056fea26469706673582212205d2cc3c161c7f5668e2b6a98c03f3beb2d87abdb514c1627c356bcd3fb82e9d864736f6c634300080c0033";

type MultiSendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiSendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiSend__factory extends ContractFactory {
  constructor(...args: MultiSendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiSend> {
    return super.deploy(overrides || {}) as Promise<MultiSend>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiSend {
    return super.attach(address) as MultiSend;
  }
  override connect(signer: Signer): MultiSend__factory {
    return super.connect(signer) as MultiSend__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiSendInterface {
    return new utils.Interface(_abi) as MultiSendInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiSend {
    return new Contract(address, _abi, signerOrProvider) as MultiSend;
  }
}
