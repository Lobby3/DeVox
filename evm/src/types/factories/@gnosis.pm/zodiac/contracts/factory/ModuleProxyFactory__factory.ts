/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ModuleProxyFactory,
  ModuleProxyFactoryInterface,
} from "../../../../../@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory";
import type { PromiseOrValue } from "../../../../../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "FailedInitialization",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "address_",
        type: "address",
      },
    ],
    name: "TakenAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "TargetHasNoCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proxy",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "masterCopy",
        type: "address",
      },
    ],
    name: "ModuleProxyCreation",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "masterCopy",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "initializer",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "saltNonce",
        type: "uint256",
      },
    ],
    name: "deployModule",
    outputs: [
      {
        internalType: "address",
        name: "proxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506107fe806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f1ab873c14610030575b600080fd5b61004a6004803603810190610045919061050a565b610060565b6040516100579190610588565b60405180910390f35b600061009b848480519060200120846040516020016100809291906105ef565b604051602081830303815290604052805190602001206101a3565b905060008173ffffffffffffffffffffffffffffffffffffffff16846040516100c49190610695565b6000604051808303816000865af19150503d8060008114610101576040519150601f19603f3d011682016040523d82523d6000602084013e610106565b606091505b5050905080610141576040517f7dabd39900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f2150ada912bf189ed721c44211199e270903fc88008c2a1e1e889ef30fe67c5f60405160405180910390a3509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561021657826040517fc80b883400000000000000000000000000000000000000000000000000000000815260040161020d9190610588565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff163b141561027357826040517ffff2336100000000000000000000000000000000000000000000000000000000815260040161026a9190610588565b60405180910390fd5b6000836040516020016102869190610797565b6040516020818303038152906040529050828151602083016000f59150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561031557816040517fdc7a7a2400000000000000000000000000000000000000000000000000000000815260040161030c9190610588565b60405180910390fd5b5092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061035b82610330565b9050919050565b61036b81610350565b811461037657600080fd5b50565b60008135905061038881610362565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103e182610398565b810181811067ffffffffffffffff82111715610400576103ff6103a9565b5b80604052505050565b600061041361031c565b905061041f82826103d8565b919050565b600067ffffffffffffffff82111561043f5761043e6103a9565b5b61044882610398565b9050602081019050919050565b82818337600083830152505050565b600061047761047284610424565b610409565b90508281526020810184848401111561049357610492610393565b5b61049e848285610455565b509392505050565b600082601f8301126104bb576104ba61038e565b5b81356104cb848260208601610464565b91505092915050565b6000819050919050565b6104e7816104d4565b81146104f257600080fd5b50565b600081359050610504816104de565b92915050565b60008060006060848603121561052357610522610326565b5b600061053186828701610379565b935050602084013567ffffffffffffffff8111156105525761055161032b565b5b61055e868287016104a6565b925050604061056f868287016104f5565b9150509250925092565b61058281610350565b82525050565b600060208201905061059d6000830184610579565b92915050565b6000819050919050565b6000819050919050565b6105c86105c3826105a3565b6105ad565b82525050565b6000819050919050565b6105e96105e4826104d4565b6105ce565b82525050565b60006105fb82856105b7565b60208201915061060b82846105d8565b6020820191508190509392505050565b600081519050919050565b600081905092915050565b60005b8381101561064f578082015181840152602081019050610634565b8381111561065e576000848401525b50505050565b600061066f8261061b565b6106798185610626565b9350610689818560208601610631565b80840191505092915050565b60006106a18284610664565b915081905092915050565b600081905092915050565b7f602d8060093d393df3363d3d373d3d3d363d7300000000000000000000000000600082015250565b60006106ed6013836106ac565b91506106f8826106b7565b601382019050919050565b60008160601b9050919050565b600061071b82610703565b9050919050565b600061072d82610710565b9050919050565b61074561074082610350565b610722565b82525050565b7f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000600082015250565b6000610781600f836106ac565b915061078c8261074b565b600f82019050919050565b60006107a2826106e0565b91506107ae8284610734565b6014820191506107bd82610774565b91508190509291505056fea264697066735822122052cd29e5ad1b78f03c75da30b089b200e41d85c2b20dd2322761cfddbb47143e64736f6c634300080c0033";

type ModuleProxyFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ModuleProxyFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ModuleProxyFactory__factory extends ContractFactory {
  constructor(...args: ModuleProxyFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ModuleProxyFactory> {
    return super.deploy(overrides || {}) as Promise<ModuleProxyFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ModuleProxyFactory {
    return super.attach(address) as ModuleProxyFactory;
  }
  override connect(signer: Signer): ModuleProxyFactory__factory {
    return super.connect(signer) as ModuleProxyFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ModuleProxyFactoryInterface {
    return new utils.Interface(_abi) as ModuleProxyFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ModuleProxyFactory {
    return new Contract(address, _abi, signerOrProvider) as ModuleProxyFactory;
  }
}
