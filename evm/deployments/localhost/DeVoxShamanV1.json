{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "baal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lootIssued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesIssued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "DonationReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "TargetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "UserWhitelisted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baal",
      "outputs": [
        {
          "internalType": "contract IBaal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "donations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_moloch",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerUnit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokensPerUnit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baal",
          "type": "address"
        }
      ],
      "name": "setBaal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "setTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensPerUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x563453d68294894e3b76002cc3e92eb87fb37b3bce39540bf3e0738a47c5b77f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "1630998",
    "logsBloom": "0x
    "blockHash": "0x9d5c5c6db6129917d6c4ff2fcef0d7ccca98ca46171dbaf440f03d236c7b7477",
    "transactionHash": "0x563453d68294894e3b76002cc3e92eb87fb37b3bce39540bf3e0738a47c5b77f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13,
        "transactionHash": "0x563453d68294894e3b76002cc3e92eb87fb37b3bce39540bf3e0738a47c5b77f",
        "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x9d5c5c6db6129917d6c4ff2fcef0d7ccca98ca46171dbaf440f03d236c7b7477"
      }
    ],
    "blockNumber": 13,
    "cumulativeGasUsed": "1630998",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "02101fe77ef4ff2030cac554a498a035",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lootIssued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesIssued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TargetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"UserWhitelisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baal\",\"outputs\":[{\"internalType\":\"contract IBaal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moloch\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baal\",\"type\":\"address\"}],\"name\":\"setBaal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used to issue voting shares (quadratic) and loot (1:1) for donations\",\"events\":{\"DonationReceived(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string)\":{\"params\":{\"amount\":\"amount donated\",\"baal\":\"DAO contract address\",\"balance\":\"current campaign balance\",\"contributorAddress\":\"wallet sending the donation\",\"id\":\"campaign id\",\"lootIssued\":\"loot issued for this donation\",\"message\":\"message accompanying the donation\",\"sharesIssued\":\"shares issued for this donation\",\"target\":\"campaign target amount\",\"total\":\"total donated from this wallet\"}},\"TargetUpdated(uint256,uint256,uint256)\":{\"params\":{\"balance\":\"current campaign balance\",\"id\":\"campaign id\",\"target\":\"campaign target amount\"}},\"UserWhitelisted(address,bool,bytes)\":{\"params\":{\"metadata\":\"user metadata\",\"status\":\"whitelist status\",\"user\":\"user address\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"donate(uint256,string)\":{\"details\":\"message sender must be whitelisted\",\"params\":{\"_message\":\"message accompanying donation\",\"_value\":\"amount donated\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBaal(address)\":{\"params\":{\"_baal\":\"BaaL contract address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateVersion()\":{\"details\":\"onlyOwner\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"whitelist(bool,bytes)\":{\"params\":{\"_metadata\":\"user metadata\",\"_status\":\"whitelist status\"}}},\"stateVariables\":{\"donations\":{\"details\":\"This is only a cache and claims older than period are deleted\"}},\"version\":1},\"userdoc\":{\"events\":{\"DonationReceived(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string)\":{\"notice\":\"emitted when a donation is received\"},\"TargetUpdated(uint256,uint256,uint256)\":{\"notice\":\"emitted when campaign target is updated\"},\"UserWhitelisted(address,bool,bytes)\":{\"notice\":\"emitted when a user is whitelisted\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Contract constructor logic\"},\"donate(uint256,string)\":{\"notice\":\"Make a donation, join the DAO and receive voting shares\"},\"donations(address)\":{\"notice\":\"Last cookie claims made by members\"},\"getTokenBalance()\":{\"notice\":\"Gets the total token balance of the contract\"},\"initialize(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Contract initialization logic\"},\"setBaal(address)\":{\"notice\":\"Set BaaL contract address\"},\"updateVersion()\":{\"notice\":\"Update the contract version number\"},\"version()\":{\"notice\":\"gets the current version of the contract\"},\"whitelist(bool,bytes)\":{\"notice\":\"Whitelist a user, enabling them to join the DAO\"}},\"notice\":\"Shaman contract for Baal v3 DAOhaus\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shaman/DeVoxShamanV1.sol\":\"DeVoxShamanV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/fixtures/Baal/interfaces/IBaal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IBaal {\\n    function burnLoot(\\n        address[] calldata from,\\n        uint256[] calldata amount\\n    ) external;\\n\\n    function burnShares(\\n        address[] calldata from,\\n        uint256[] calldata amount\\n    ) external;\\n\\n    function mintLoot(\\n        address[] calldata to,\\n        uint256[] calldata amount\\n    ) external;\\n\\n    function mintShares(\\n        address[] calldata to,\\n        uint256[] calldata amount\\n    ) external;\\n\\n    function setAdminConfig(bool pauseShares, bool pauseLoot) external;\\n\\n    function setGovernanceConfig(bytes memory _governanceConfig) external;\\n\\n    function shamans(address shaman) external returns (uint256);\\n\\n    function setShamans(\\n        address[] calldata shamans,\\n        uint256[] calldata permissions\\n    ) external;\\n\\n    function isManager(address shaman) external returns (bool);\\n\\n    function target() external returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function sharesToken() external view returns (address);\\n\\n    function lootToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcf4388a6ab43798f5f9d332cef8a1464cdfb9a2ebdc750b117150538c8e212e8\",\"license\":\"MIT\"},\"contracts/lib/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.12;\\n\\n// based on https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol\\nlibrary FixedPointMathLib {\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // This segment is to get a reasonable initial estimate for the Babylonian method.\\n            // If the initial estimate is bad, the number of correct bits increases ~linearly\\n            // each iteration instead of ~quadratically.\\n            // The idea is to get z*z*y within a small factor of x.\\n            // More iterations here gets y in a tighter range. Currently, we will have\\n            // y in [256, 256*2^16). We ensure y>= 256 so that the relative difference\\n            // between y and y+1 is small. If x < 256 this is not possible, but those cases\\n            // are easy enough to verify exhaustively.\\n            z := 181 // The 'correct' value is 1, but this saves a multiply later\\n            let y := x\\n            // Note that we check y>= 2^(k + 8) but shift right by k bits each branch,\\n            // this is to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8),\\n            // and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of x, or about 20bps.\\n\\n            // The estimate sqrt(x) = (181/1024) * (x+1) is off by a factor of ~2.83 both when x=1\\n            // and when x = 256 or 1/256. In the worst case, this needs seven Babylonian iterations.\\n            z := shr(18, mul(z, add(y, 65536))) // A multiply is saved from the initial z := 181\\n\\n            // Run the Babylonian method seven times. This should be enough given initial estimate.\\n            // Possibly with a quadratic/cubic polynomial above we could get 4-6.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // See https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division.\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This check ensures we return floor.\\n            // The solmate implementation assigns zRoundDown := div(x, z) first, but\\n            // since this case is rare, we choose to save gas on the assignment and\\n            // repeat division in the rare case.\\n            // If you don't care whether floor or ceil is returned, you can skip this.\\n            if lt(div(x, z), z) {\\n                z := div(x, z)\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xed477070cb858f9eb1aeb21fba45247e1d621c7ed2baad45e14069aed1242edb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/shaman/DeVoxShamanV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {IBaal} from \\\"../fixtures/Baal/interfaces/IBaal.sol\\\";\\nimport {FixedPointMathLib} from \\\"../lib/FixedPointMathLib.sol\\\";\\nimport {IShaman} from \\\"./IShaman.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// @notice Shaman contract for Baal v3 DAOhaus\\n/// @dev This contract is used to issue voting shares (quadratic) and loot (1:1) for donations\\ncontract DeVoxShamanV1 is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    UUPSUpgradeable,\\n    IShaman\\n{\\n    enum TokenType {\\n        LOOT,\\n        SHARES\\n    }\\n\\n    /// @notice Role required in order to access admin methods\\n    // bytes32 public constant DEFAULT_ADMIN_ROLE =\\n    //     keccak256('DEFAULT_ADMIN_ROLE');\\n    /// @notice Current version of the contract\\n    uint16 internal _version;\\n\\n    IBaal public baal;\\n    IERC20 public token;\\n    uint256 public id;\\n    uint256 public pricePerUnit;\\n    uint256 public tokensPerUnit;\\n    uint256 public target;\\n\\n    /// @notice Last cookie claims made by members\\n    /// @dev This is only a cache and claims older than period are deleted\\n    mapping(address => uint256) public donations;\\n\\n    /// @notice Whitelist of addresses that can join the DAO\\n    mapping(address => bool) private _whitelist;\\n\\n    /*******************\\n     * EVENTS\\n     ******************/\\n\\n    /// @notice emitted when a donation is received\\n    /// @param contributorAddress wallet sending the donation\\n    /// @param baal DAO contract address\\n    /// @param id campaign id\\n    /// @param amount amount donated\\n    /// @param total total donated from this wallet\\n    /// @param target campaign target amount\\n    /// @param balance current campaign balance\\n    /// @param lootIssued loot issued for this donation\\n    /// @param sharesIssued shares issued for this donation\\n    /// @param message message accompanying the donation\\n    event DonationReceived(\\n        address indexed contributorAddress,\\n        address baal,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 total,\\n        uint256 target,\\n        uint256 balance,\\n        uint256 lootIssued,\\n        uint256 sharesIssued,\\n        string message\\n    );\\n\\n    /// @notice emitted when campaign target is updated\\n    /// @param id campaign id\\n    /// @param target campaign target amount\\n    /// @param balance current campaign balance\\n    event TargetUpdated(uint256 id, uint256 target, uint256 balance);\\n\\n    /// @notice emitted when a user is whitelisted\\n    /// @param user user address\\n    /// @param status whitelist status\\n    /// @param metadata user metadata\\n    event UserWhitelisted(address indexed user, bool status, bytes metadata);\\n\\n    /*******************\\n     * DEPLOY\\n     ******************/\\n\\n    /// @notice Contract constructor logic\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Contract initialization logic\\n    function initialize(\\n        address _moloch,\\n        address payable _token,\\n        uint256 _id,\\n        uint256 _pricePerUnit,\\n        uint256 _tokensPerUnit,\\n        uint256 _target\\n    ) external initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n\\n        baal = IBaal(_moloch);\\n        token = IERC20(_token);\\n        id = _id;\\n        pricePerUnit = _pricePerUnit;\\n        tokensPerUnit = _tokensPerUnit;\\n        target = _target;\\n    }\\n\\n    /// @notice Set BaaL contract address\\n    /// @param _baal BaaL contract address\\n    function setBaal(address _baal) external override /*onlyOwner*/ {\\n        baal = IBaal(_baal);\\n    }\\n\\n    /// Whitelist a user, enabling them to join the DAO\\n    /// @param _status whitelist status\\n    /// @param _metadata user metadata\\n    function whitelist(\\n        bool _status,\\n        bytes calldata _metadata\\n    ) external override {\\n        require(\\n            _whitelist[msg.sender] != _status,\\n            \\\"whitelist status unchanged\\\"\\n        );\\n\\n        _whitelist[msg.sender] = _status;\\n\\n        emit UserWhitelisted(msg.sender, _status, _metadata);\\n    }\\n\\n    /// @notice Make a donation, join the DAO and receive voting shares\\n    /// @param _value amount donated\\n    /// @param _message message accompanying donation\\n    /// @dev message sender must be whitelisted\\n    function donate(\\n        uint256 _value,\\n        string calldata _message\\n    ) external override nonReentrant {\\n        require(_whitelist[msg.sender], \\\"user not whitelisted\\\");\\n        require(address(baal) != address(0), \\\"!init\\\");\\n        require(baal.isManager(address(this)), \\\"Shaman not manager\\\");\\n        require(_value % pricePerUnit == 0, \\\"invalid amount\\\"); // require value as multiple of units\\n\\n        // send to DAO\\n        require(\\n            token.transferFrom(msg.sender, baal.target(), _value),\\n            \\\"Transfer failed\\\"\\n        );\\n\\n        uint256 lootIssued = _lootToIssue(_value);\\n        _mintTokens(msg.sender, lootIssued, TokenType.LOOT);\\n\\n        uint256 sharesIssued = _sharesToIssue(_value);\\n        _mintTokens(msg.sender, sharesIssued, TokenType.SHARES);\\n\\n        uint256 total = donations[msg.sender];\\n        total = total + _value;\\n        donations[msg.sender] = total;\\n\\n        emit DonationReceived(\\n            msg.sender,\\n            address(baal),\\n            id,\\n            _value,\\n            total,\\n            target,\\n            getTokenBalance(),\\n            lootIssued,\\n            sharesIssued,\\n            _message\\n        );\\n    }\\n\\n    /// @notice Calculate the amount of loot to issue for a given donation\\n    function _lootToIssue(\\n        uint256 //_value\\n    ) internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /// @notice Calculate the amount of shares to issue for a given donation\\n    /// @dev Use a square root function to give a Quadratic Voting effect\\n    function _sharesToIssue(\\n        uint256 _value\\n    ) internal view virtual returns (uint256) {\\n        return FixedPointMathLib.sqrt(_value / pricePerUnit) * tokensPerUnit;\\n    }\\n\\n    /// @notice Mint tokens for a given address\\n    /// @param to Recipient of tokens\\n    /// @param amount Amount of tokens to mint\\n    /// @param _tokenType Shares or Loot\\n    function _mintTokens(\\n        address to,\\n        uint256 amount,\\n        TokenType _tokenType\\n    ) private {\\n        address[] memory _receivers = new address[](1);\\n        _receivers[0] = to;\\n\\n        uint256[] memory _amounts = new uint256[](1);\\n        _amounts[0] = amount;\\n\\n        if (_tokenType == TokenType.SHARES) {\\n            baal.mintShares(_receivers, _amounts);\\n        } else {\\n            baal.mintLoot(_receivers, _amounts);\\n        }\\n    }\\n\\n    /// @notice Gets the total token balance of the contract\\n    function getTokenBalance() public returns (uint256) {\\n        return token.balanceOf(baal.target());\\n    }\\n\\n    function setTarget(uint256 _target) public {\\n        target = _target;\\n    }\\n\\n    /// @notice gets the current version of the contract\\n    function version() public view virtual returns (uint256) {\\n        return _version;\\n    }\\n\\n    /// @notice Update the contract version number\\n    /// @dev onlyOwner\\n    function updateVersion() external onlyOwner {\\n        _version += 1;\\n    }\\n\\n    /*******************\\n     * INTERNAL\\n     ******************/\\n\\n    /// @notice upgrade authorization logic\\n    /// @dev adds onlyOwner requirement\\n    function _authorizeUpgrade(\\n        address /*newImplementation*/\\n    )\\n        internal\\n        view\\n        override\\n        onlyOwner // solhint-disable-next-line no-empty-blocks\\n    {\\n        //empty block\\n    }\\n}\\n\",\"keccak256\":\"0x9e7fb13919923ba4d08ac62b00cf2a8f7c29b4e1073ccf7df1fbdaa60e8eaf17\",\"license\":\"GPL-3.0-or-later\"},\"contracts/shaman/IShaman.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.12;\\n\\ninterface IShaman {\\n    /// @notice Contract initialization logic\\n    function initialize(\\n        address _moloch,\\n        address payable _token,\\n        uint256 _id,\\n        uint256 _pricePerUnit,\\n        uint256 _tokensPerUnit,\\n        uint256 _target\\n    ) external;\\n\\n    /// @notice Set BaaL contract address\\n    /// @param _baal BaaL contract address\\n    function setBaal(address _baal) external;\\n\\n    /// @notice Make a donation, join the DAO and receive voting shares\\n    /// @param _value amount donated\\n    /// @param _message message accompanying donation\\n    function donate(uint256 _value, string calldata _message) external;\\n\\n    /// Whitelist a user, enabling them to join the DAO\\n    /// @param _status whitelist status\\n    /// @param _metadata user metadata\\n    function whitelist(bool _status, bytes calldata _metadata) external;\\n}\\n\",\"keccak256\":\"0x3a1756b35fac4277b4be11a1fab6ac178abe5dd8cc4a25180657718459dbdf2a\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611c14610118600039600081816103c901528181610412015281816104d90152818161051901526105950152611c146000f3fe60806040526004361061012a5760003560e01c80638da5cb5b116100ab578063d4b839921161006f578063d4b8399214610315578063e5a2a2a51461032c578063e66825c314610352578063f2fde38b14610368578063f8d2876814610388578063fc0c546a1461039e57600080fd5b80638da5cb5b146102695780639d79450814610290578063af640d0f146102b0578063b480eac0146102c6578063cc6cb19a146102e757600080fd5b806354fd4d50116100f257806354fd4d50146101e6578063715018a6146101ff57806382b2e2571461021457806386489ba9146102295780638d59d1f11461024957600080fd5b80632b3ee5f51461012f5780633659cfe61461017657806348c02dc1146101965780634f1ef286146101ab57806352d1902d146101be575b600080fd5b34801561013b57600080fd5b5061017461014a36600461157c565b60fb80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b005b34801561018257600080fd5b5061017461019136600461157c565b6103be565b3480156101a257600080fd5b50610174610490565b6101746101b93660046115af565b6104ce565b3480156101ca57600080fd5b506101d3610588565b6040519081526020015b60405180910390f35b3480156101f257600080fd5b5060fb5461ffff166101d3565b34801561020b57600080fd5b50610174610636565b34801561022057600080fd5b506101d361064a565b34801561023557600080fd5b50610174610244366004611673565b610732565b34801561025557600080fd5b50610174610264366004611715565b6108a7565b34801561027557600080fd5b506033546001600160a01b03165b6040516101dd9190611761565b34801561029c57600080fd5b506101746102ab366004611783565b610c64565b3480156102bc57600080fd5b506101d360fd5481565b3480156102d257600080fd5b506101746102e13660046117bf565b61010055565b3480156102f357600080fd5b506101d361030236600461157c565b6101016020526000908152604090205481565b34801561032157600080fd5b506101d36101005481565b34801561033857600080fd5b5060fb54610283906201000090046001600160a01b031681565b34801561035e57600080fd5b506101d360fe5481565b34801561037457600080fd5b5061017461038336600461157c565b610d28565b34801561039457600080fd5b506101d360ff5481565b3480156103aa57600080fd5b5060fc54610283906001600160a01b031681565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104105760405162461bcd60e51b8152600401610407906117d8565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610442610d9e565b6001600160a01b0316146104685760405162461bcd60e51b815260040161040790611824565b61047181610dba565b6040805160008082526020820190925261048d91839190610dc2565b50565b610498610f2d565b60fb8054600191906000906104b290849061ffff16611886565b92506101000a81548161ffff021916908361ffff160217905550565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105175760405162461bcd60e51b8152600401610407906117d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610549610d9e565b6001600160a01b03161461056f5760405162461bcd60e51b815260040161040790611824565b61057882610dba565b61058482826001610dc2565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106235760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610407565b50600080516020611b9883398151915290565b61063e610f2d565b6106486000610f87565b565b60fc5460fb5460408051636a5c1cc960e11b815290516000936001600160a01b03908116936370a0823193620100009091049091169163d4b8399291600480820192602092909190829003018189875af11580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d091906118ac565b6040518263ffffffff1660e01b81526004016106ec9190611761565b602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d91906118c9565b905090565b600054610100900460ff16158080156107525750600054600160ff909116105b8061076c5750303b15801561076c575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610407565b6000805460ff1916600117905580156107f2576000805461ff0019166101001790555b6107fa610fd9565b610802611008565b60fb805462010000600160b01b031916620100006001600160a01b038a8116919091029190911790915560fc80546001600160a01b03191691881691909117905560fd85905560fe84905560ff839055610100829055801561089e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6108af61102f565b336000908152610102602052604090205460ff166109065760405162461bcd60e51b81526020600482015260146024820152731d5cd95c881b9bdd081dda1a5d195b1a5cdd195960621b6044820152606401610407565b60fb546201000090046001600160a01b031661094c5760405162461bcd60e51b8152602060048201526005602482015264085a5b9a5d60da1b6044820152606401610407565b60fb5460405163f3ae241560e01b8152620100009091046001600160a01b03169063f3ae241590610981903090600401611761565b6020604051808303816000875af11580156109a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c491906118e2565b610a055760405162461bcd60e51b815260206004820152601260248201527129b430b6b0b7103737ba1036b0b730b3b2b960711b6044820152606401610407565b60fe54610a129084611915565b15610a505760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610407565b60fc5460fb5460408051636a5c1cc960e11b815290516001600160a01b03938416936323b872dd933393620100009091049091169163d4b839929160048082019260209290919082900301816000875af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad691906118ac565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018690526064016020604051808303816000875af1158015610b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4e91906118e2565b610b8c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610407565b6000610b9a33826000611089565b6000610ba585611214565b9050610bb333826001611089565b3360009081526101016020526040902054610bce8682611929565b3360008181526101016020526040902082905560fb5460fd546101005493945091927ff04885d0e4a85ff9facb1781f4ac658cdb9bf783b710500eac6f0a07709ee96292620100009092046001600160a01b031691908a908690610c3061064a565b8a8a8e8e604051610c4a9a9998979695949392919061196a565b60405180910390a2505050610c5f6001606555565b505050565b336000908152610102602052604090205460ff1615158315151415610ccb5760405162461bcd60e51b815260206004820152601a60248201527f77686974656c6973742073746174757320756e6368616e6765640000000000006044820152606401610407565b336000818152610102602052604090819020805460ff1916861515179055517fc14aba57636c37da4459359c744f88dbb152ff25b6baad0b066ae60b6d30802490610d1b908690869086906119c9565b60405180910390a2505050565b610d30610f2d565b6001600160a01b038116610d955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610407565b61048d81610f87565b600080516020611b98833981519152546001600160a01b031690565b61048d610f2d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610df557610c5f8361123f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610e4f575060408051601f3d908101601f19168201909252610e4c918101906118c9565b60015b610eb25760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610407565b600080516020611b988339815191528114610f215760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610407565b50610c5f8383836112db565b6033546001600160a01b031633146106485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610407565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166110005760405162461bcd60e51b8152600401610407906119ee565b610648611306565b600054610100900460ff166106485760405162461bcd60e51b8152600401610407906119ee565b600260655414156110825760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610407565b6002606555565b6040805160018082528183019092526000916020808301908036833701905050905083816000815181106110bf576110bf611a39565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050838160008151811061111057611110611a39565b6020908102919091010152600183600181111561112f5761112f611a4f565b14156111a35760fb54604051632c78fd0360e21b8152620100009091046001600160a01b03169063b1e3f40c9061116c9085908590600401611a65565b600060405180830381600087803b15801561118657600080fd5b505af115801561119a573d6000803e3d6000fd5b5050505061120d565b60fb546040516322936c2360e11b8152620100009091046001600160a01b031690634526d846906111da9085908590600401611a65565b600060405180830381600087803b1580156111f457600080fd5b505af1158015611208573d6000803e3d6000fd5b505050505b5050505050565b600060ff5461122f60fe548461122a9190611ae9565b611336565b6112399190611afd565b92915050565b6001600160a01b0381163b6112ac5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610407565b600080516020611b9883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6112e4836113db565b6000825111806112f15750805b15610c5f57611300838361141b565b50505050565b600054610100900460ff1661132d5760405162461bcd60e51b8152600401610407906119ee565b61064833610f87565b60b581600160881b811061134f5760409190911b9060801c5b600160481b81106113655760209190911b9060401c5b65010000000000811061137d5760109190911b9060201c5b630100000081106113935760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c8082048111156113d65781045b919050565b6113e48161123f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606114408383604051806060016040528060278152602001611bb860279139611447565b9392505050565b6060600080856001600160a01b0316856040516114649190611b48565b600060405180830381855af49150503d806000811461149f576040519150601f19603f3d011682016040523d82523d6000602084013e6114a4565b606091505b50915091506114b5868383876114bf565b9695505050505050565b6060831561152b578251611524576001600160a01b0385163b6115245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610407565b5081611535565b611535838361153d565b949350505050565b81511561154d5781518083602001fd5b8060405162461bcd60e51b81526004016104079190611b64565b6001600160a01b038116811461048d57600080fd5b60006020828403121561158e57600080fd5b813561144081611567565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156115c257600080fd5b82356115cd81611567565b9150602083013567ffffffffffffffff808211156115ea57600080fd5b818501915085601f8301126115fe57600080fd5b81358181111561161057611610611599565b604051601f8201601f19908116603f0116810190838211818310171561163857611638611599565b8160405282815288602084870101111561165157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060008060008060c0878903121561168c57600080fd5b863561169781611567565b955060208701356116a781611567565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008083601f8401126116de57600080fd5b50813567ffffffffffffffff8111156116f657600080fd5b60208301915083602082850101111561170e57600080fd5b9250929050565b60008060006040848603121561172a57600080fd5b83359250602084013567ffffffffffffffff81111561174857600080fd5b611754868287016116cc565b9497909650939450505050565b6001600160a01b0391909116815260200190565b801515811461048d57600080fd5b60008060006040848603121561179857600080fd5b83356117a381611775565b9250602084013567ffffffffffffffff81111561174857600080fd5b6000602082840312156117d157600080fd5b5035919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600061ffff8083168185168083038211156118a3576118a3611870565b01949350505050565b6000602082840312156118be57600080fd5b815161144081611567565b6000602082840312156118db57600080fd5b5051919050565b6000602082840312156118f457600080fd5b815161144081611775565b634e487b7160e01b600052601260045260246000fd5b600082611924576119246118ff565b500690565b6000821982111561193c5761193c611870565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600061012060018060a01b038d1683528b60208401528a60408401528960608401528860808401528760a08401528660c08401528560e0840152806101008401526119b88184018587611941565b9d9c50505050505050505050505050565b83151581526040602082015260006119e5604083018486611941565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b604080825283519082018190526000906020906060840190828701845b82811015611aa75781516001600160a01b031684529284019290840190600101611a82565b5050508381038285015284518082528583019183019060005b81811015611adc57835183529284019291840191600101611ac0565b5090979650505050505050565b600082611af857611af86118ff565b500490565b6000816000190483118215151615611b1757611b17611870565b500290565b60005b83811015611b37578181015183820152602001611b1f565b838111156113005750506000910152565b60008251611b5a818460208701611b1c565b9190910192915050565b6020815260008251806020840152611b83816040850160208701611b1c565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207fe0a435be3d5ac73bae18f05b03f12231189bf5c30139e4dbf1a3f760191d3064736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80638da5cb5b116100ab578063d4b839921161006f578063d4b8399214610315578063e5a2a2a51461032c578063e66825c314610352578063f2fde38b14610368578063f8d2876814610388578063fc0c546a1461039e57600080fd5b80638da5cb5b146102695780639d79450814610290578063af640d0f146102b0578063b480eac0146102c6578063cc6cb19a146102e757600080fd5b806354fd4d50116100f257806354fd4d50146101e6578063715018a6146101ff57806382b2e2571461021457806386489ba9146102295780638d59d1f11461024957600080fd5b80632b3ee5f51461012f5780633659cfe61461017657806348c02dc1146101965780634f1ef286146101ab57806352d1902d146101be575b600080fd5b34801561013b57600080fd5b5061017461014a36600461157c565b60fb80546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b005b34801561018257600080fd5b5061017461019136600461157c565b6103be565b3480156101a257600080fd5b50610174610490565b6101746101b93660046115af565b6104ce565b3480156101ca57600080fd5b506101d3610588565b6040519081526020015b60405180910390f35b3480156101f257600080fd5b5060fb5461ffff166101d3565b34801561020b57600080fd5b50610174610636565b34801561022057600080fd5b506101d361064a565b34801561023557600080fd5b50610174610244366004611673565b610732565b34801561025557600080fd5b50610174610264366004611715565b6108a7565b34801561027557600080fd5b506033546001600160a01b03165b6040516101dd9190611761565b34801561029c57600080fd5b506101746102ab366004611783565b610c64565b3480156102bc57600080fd5b506101d360fd5481565b3480156102d257600080fd5b506101746102e13660046117bf565b61010055565b3480156102f357600080fd5b506101d361030236600461157c565b6101016020526000908152604090205481565b34801561032157600080fd5b506101d36101005481565b34801561033857600080fd5b5060fb54610283906201000090046001600160a01b031681565b34801561035e57600080fd5b506101d360fe5481565b34801561037457600080fd5b5061017461038336600461157c565b610d28565b34801561039457600080fd5b506101d360ff5481565b3480156103aa57600080fd5b5060fc54610283906001600160a01b031681565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104105760405162461bcd60e51b8152600401610407906117d8565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610442610d9e565b6001600160a01b0316146104685760405162461bcd60e51b815260040161040790611824565b61047181610dba565b6040805160008082526020820190925261048d91839190610dc2565b50565b610498610f2d565b60fb8054600191906000906104b290849061ffff16611886565b92506101000a81548161ffff021916908361ffff160217905550565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105175760405162461bcd60e51b8152600401610407906117d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610549610d9e565b6001600160a01b03161461056f5760405162461bcd60e51b815260040161040790611824565b61057882610dba565b61058482826001610dc2565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106235760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b6064820152608401610407565b50600080516020611b9883398151915290565b61063e610f2d565b6106486000610f87565b565b60fc5460fb5460408051636a5c1cc960e11b815290516000936001600160a01b03908116936370a0823193620100009091049091169163d4b8399291600480820192602092909190829003018189875af11580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d091906118ac565b6040518263ffffffff1660e01b81526004016106ec9190611761565b602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d91906118c9565b905090565b600054610100900460ff16158080156107525750600054600160ff909116105b8061076c5750303b15801561076c575060005460ff166001145b6107cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610407565b6000805460ff1916600117905580156107f2576000805461ff0019166101001790555b6107fa610fd9565b610802611008565b60fb805462010000600160b01b031916620100006001600160a01b038a8116919091029190911790915560fc80546001600160a01b03191691881691909117905560fd85905560fe84905560ff839055610100829055801561089e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6108af61102f565b336000908152610102602052604090205460ff166109065760405162461bcd60e51b81526020600482015260146024820152731d5cd95c881b9bdd081dda1a5d195b1a5cdd195960621b6044820152606401610407565b60fb546201000090046001600160a01b031661094c5760405162461bcd60e51b8152602060048201526005602482015264085a5b9a5d60da1b6044820152606401610407565b60fb5460405163f3ae241560e01b8152620100009091046001600160a01b03169063f3ae241590610981903090600401611761565b6020604051808303816000875af11580156109a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c491906118e2565b610a055760405162461bcd60e51b815260206004820152601260248201527129b430b6b0b7103737ba1036b0b730b3b2b960711b6044820152606401610407565b60fe54610a129084611915565b15610a505760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b6044820152606401610407565b60fc5460fb5460408051636a5c1cc960e11b815290516001600160a01b03938416936323b872dd933393620100009091049091169163d4b839929160048082019260209290919082900301816000875af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad691906118ac565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018690526064016020604051808303816000875af1158015610b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4e91906118e2565b610b8c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610407565b6000610b9a33826000611089565b6000610ba585611214565b9050610bb333826001611089565b3360009081526101016020526040902054610bce8682611929565b3360008181526101016020526040902082905560fb5460fd546101005493945091927ff04885d0e4a85ff9facb1781f4ac658cdb9bf783b710500eac6f0a07709ee96292620100009092046001600160a01b031691908a908690610c3061064a565b8a8a8e8e604051610c4a9a9998979695949392919061196a565b60405180910390a2505050610c5f6001606555565b505050565b336000908152610102602052604090205460ff1615158315151415610ccb5760405162461bcd60e51b815260206004820152601a60248201527f77686974656c6973742073746174757320756e6368616e6765640000000000006044820152606401610407565b336000818152610102602052604090819020805460ff1916861515179055517fc14aba57636c37da4459359c744f88dbb152ff25b6baad0b066ae60b6d30802490610d1b908690869086906119c9565b60405180910390a2505050565b610d30610f2d565b6001600160a01b038116610d955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610407565b61048d81610f87565b600080516020611b98833981519152546001600160a01b031690565b61048d610f2d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610df557610c5f8361123f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610e4f575060408051601f3d908101601f19168201909252610e4c918101906118c9565b60015b610eb25760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610407565b600080516020611b988339815191528114610f215760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610407565b50610c5f8383836112db565b6033546001600160a01b031633146106485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610407565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166110005760405162461bcd60e51b8152600401610407906119ee565b610648611306565b600054610100900460ff166106485760405162461bcd60e51b8152600401610407906119ee565b600260655414156110825760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610407565b6002606555565b6040805160018082528183019092526000916020808301908036833701905050905083816000815181106110bf576110bf611a39565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050838160008151811061111057611110611a39565b6020908102919091010152600183600181111561112f5761112f611a4f565b14156111a35760fb54604051632c78fd0360e21b8152620100009091046001600160a01b03169063b1e3f40c9061116c9085908590600401611a65565b600060405180830381600087803b15801561118657600080fd5b505af115801561119a573d6000803e3d6000fd5b5050505061120d565b60fb546040516322936c2360e11b8152620100009091046001600160a01b031690634526d846906111da9085908590600401611a65565b600060405180830381600087803b1580156111f457600080fd5b505af1158015611208573d6000803e3d6000fd5b505050505b5050505050565b600060ff5461122f60fe548461122a9190611ae9565b611336565b6112399190611afd565b92915050565b6001600160a01b0381163b6112ac5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610407565b600080516020611b9883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6112e4836113db565b6000825111806112f15750805b15610c5f57611300838361141b565b50505050565b600054610100900460ff1661132d5760405162461bcd60e51b8152600401610407906119ee565b61064833610f87565b60b581600160881b811061134f5760409190911b9060801c5b600160481b81106113655760209190911b9060401c5b65010000000000811061137d5760109190911b9060201c5b630100000081106113935760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c8082048111156113d65781045b919050565b6113e48161123f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606114408383604051806060016040528060278152602001611bb860279139611447565b9392505050565b6060600080856001600160a01b0316856040516114649190611b48565b600060405180830381855af49150503d806000811461149f576040519150601f19603f3d011682016040523d82523d6000602084013e6114a4565b606091505b50915091506114b5868383876114bf565b9695505050505050565b6060831561152b578251611524576001600160a01b0385163b6115245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610407565b5081611535565b611535838361153d565b949350505050565b81511561154d5781518083602001fd5b8060405162461bcd60e51b81526004016104079190611b64565b6001600160a01b038116811461048d57600080fd5b60006020828403121561158e57600080fd5b813561144081611567565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156115c257600080fd5b82356115cd81611567565b9150602083013567ffffffffffffffff808211156115ea57600080fd5b818501915085601f8301126115fe57600080fd5b81358181111561161057611610611599565b604051601f8201601f19908116603f0116810190838211818310171561163857611638611599565b8160405282815288602084870101111561165157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060008060008060c0878903121561168c57600080fd5b863561169781611567565b955060208701356116a781611567565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008083601f8401126116de57600080fd5b50813567ffffffffffffffff8111156116f657600080fd5b60208301915083602082850101111561170e57600080fd5b9250929050565b60008060006040848603121561172a57600080fd5b83359250602084013567ffffffffffffffff81111561174857600080fd5b611754868287016116cc565b9497909650939450505050565b6001600160a01b0391909116815260200190565b801515811461048d57600080fd5b60008060006040848603121561179857600080fd5b83356117a381611775565b9250602084013567ffffffffffffffff81111561174857600080fd5b6000602082840312156117d157600080fd5b5035919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600061ffff8083168185168083038211156118a3576118a3611870565b01949350505050565b6000602082840312156118be57600080fd5b815161144081611567565b6000602082840312156118db57600080fd5b5051919050565b6000602082840312156118f457600080fd5b815161144081611775565b634e487b7160e01b600052601260045260246000fd5b600082611924576119246118ff565b500690565b6000821982111561193c5761193c611870565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600061012060018060a01b038d1683528b60208401528a60408401528960608401528860808401528760a08401528660c08401528560e0840152806101008401526119b88184018587611941565b9d9c50505050505050505050505050565b83151581526040602082015260006119e5604083018486611941565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b604080825283519082018190526000906020906060840190828701845b82811015611aa75781516001600160a01b031684529284019290840190600101611a82565b5050508381038285015284518082528583019183019060005b81811015611adc57835183529284019291840191600101611ac0565b5090979650505050505050565b600082611af857611af86118ff565b500490565b6000816000190483118215151615611b1757611b17611870565b500290565b60005b83811015611b37578181015183820152602001611b1f565b838111156113005750506000910152565b60008251611b5a818460208701611b1c565b9190910192915050565b6020815260008251806020840152611b83816040850160208701611b1c565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207fe0a435be3d5ac73bae18f05b03f12231189bf5c30139e4dbf1a3f760191d3064736f6c634300080c0033",
  "devdoc": {
    "details": "This contract is used to issue voting shares (quadratic) and loot (1:1) for donations",
    "events": {
      "DonationReceived(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string)": {
        "params": {
          "amount": "amount donated",
          "baal": "DAO contract address",
          "balance": "current campaign balance",
          "contributorAddress": "wallet sending the donation",
          "id": "campaign id",
          "lootIssued": "loot issued for this donation",
          "message": "message accompanying the donation",
          "sharesIssued": "shares issued for this donation",
          "target": "campaign target amount",
          "total": "total donated from this wallet"
        }
      },
      "TargetUpdated(uint256,uint256,uint256)": {
        "params": {
          "balance": "current campaign balance",
          "id": "campaign id",
          "target": "campaign target amount"
        }
      },
      "UserWhitelisted(address,bool,bytes)": {
        "params": {
          "metadata": "user metadata",
          "status": "whitelist status",
          "user": "user address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "donate(uint256,string)": {
        "details": "message sender must be whitelisted",
        "params": {
          "_message": "message accompanying donation",
          "_value": "amount donated"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBaal(address)": {
        "params": {
          "_baal": "BaaL contract address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateVersion()": {
        "details": "onlyOwner"
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "whitelist(bool,bytes)": {
        "params": {
          "_metadata": "user metadata",
          "_status": "whitelist status"
        }
      }
    },
    "stateVariables": {
      "donations": {
        "details": "This is only a cache and claims older than period are deleted"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DonationReceived(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string)": {
        "notice": "emitted when a donation is received"
      },
      "TargetUpdated(uint256,uint256,uint256)": {
        "notice": "emitted when campaign target is updated"
      },
      "UserWhitelisted(address,bool,bytes)": {
        "notice": "emitted when a user is whitelisted"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Contract constructor logic"
      },
      "donate(uint256,string)": {
        "notice": "Make a donation, join the DAO and receive voting shares"
      },
      "donations(address)": {
        "notice": "Last cookie claims made by members"
      },
      "getTokenBalance()": {
        "notice": "Gets the total token balance of the contract"
      },
      "initialize(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Contract initialization logic"
      },
      "setBaal(address)": {
        "notice": "Set BaaL contract address"
      },
      "updateVersion()": {
        "notice": "Update the contract version number"
      },
      "version()": {
        "notice": "gets the current version of the contract"
      },
      "whitelist(bool,bytes)": {
        "notice": "Whitelist a user, enabling them to join the DAO"
      }
    },
    "notice": "Shaman contract for Baal v3 DAOhaus",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 503,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 506,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1256,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 815,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 884,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 485,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2730,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "_version",
        "offset": 0,
        "slot": "251",
        "type": "t_uint16"
      },
      {
        "astId": 2733,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "baal",
        "offset": 2,
        "slot": "251",
        "type": "t_contract(IBaal)2493"
      },
      {
        "astId": 2736,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "token",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IERC20)1959"
      },
      {
        "astId": 2738,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "id",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 2740,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "pricePerUnit",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 2742,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "tokensPerUnit",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 2744,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "target",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 2749,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "donations",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2754,
        "contract": "contracts/shaman/DeVoxShamanV1.sol:DeVoxShamanV1",
        "label": "_whitelist",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBaal)2493": {
        "encoding": "inplace",
        "label": "contract IBaal",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1959": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}